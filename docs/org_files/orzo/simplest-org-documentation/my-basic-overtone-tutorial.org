* stop all sound
#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil

* get your overtone and org environment running

** boot internal server to run pscope
#+BEGIN_SRC clojure
;; boots internal server
(use 'overtone.live)
#+END_SRC

#+BEGIN_SRC clojure
;; seems necessary to 'use' the scope specifically?
(use 'overtone.studio.scope)
#+END_SRC

#+RESULTS:
: nil

** basic overtone startup and test from org-mode--use external server
Don't boot an internal server, but connect to an already started instance.

Doesn't always work as expected? Make sure not just that *WorkSpace*
is open but that the server has reported back in the *PostBuffer*

Also, difference between loading in repl or from org babel?
#+BEGIN_SRC clojure :results silent
(use 'overtone.core)
#+END_SRC

#+BEGIN_SRC clojure :results silent
;; connect to an existing one, 
;; always on 57110, so no need to specify
(connect-external-server 57110)
#+END_SRC

#+RESULTS:
: :happy-hacking

** start some where--demo a sin-osc
#+BEGIN_SRC clojure :results silent
(demo 0.1 (sin-osc))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 36>

** make it easy to use org and emacs with kmacros
Set Cmd-F7 to call stop--requires correct navigation within this
buffer

#+BEGIN_SRC elisp
  (fset 'overtone-call-stop-from-buffer-beginning
        (lambda (&optional arg) "Keyboard macro." 
          (interactive "p") 
          (kmacro-exec-ring-item 
           (quote ([67108896 67108896 134217788 3 22 14 3 3 134217788 tab 21 67108896 21 67108896] 0 "%d")) arg)))
  (global-set-key [s-f7] 'overtone-call-stop-from-buffer-beginning)
#+END_SRC

#+RESULTS:
: overtone-call-stop-from-buffer-beginning

#+BEGIN_SRC clojure :results silent
(demo 10 (sin-osc))
#+END_SRC

Use a repl to call ~stop~ (NB. uses same keybinding as above; thus will overwrite the above macro)
#+BEGIN_SRC elisp
(fset 'overtone-call-stop-in-repl
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([24 98 99 105 100 101 114 45 114 101 112 108 return 40 115 116 111 112 return 24 98 return] 0 "%d")) arg)))

(global-set-key [s-f7] 'overtone-call-stop-in-repl)
#+END_SRC

* overview using overtone concepts and language
  :PROPERTIES:
  :ID:       6DD3E107-E56E-4572-AEA3-B5D689819172
  :END:
** use definst
*** a simple noise with no real parameters
#+BEGIN_SRC clojure :results silent
(definst anoise [vol 0.5]
  (* (pink-noise)
     vol))

(anoise)
#+END_SRC

*** find good ways to stop synths individually vs. all synths
NB. What should you do about babel argument headers? 
For example, Is the session argument recommended? What about "show-process" argument header?
What can you assume about "results" header arguments? Is it best to default to "silent?"


#+BEGIN_SRC clojure :results silent
(kill anoise)
#+END_SRC


** make a definst with more parameters
*** use a "env-gen" Ugen (with a lin)
 #+BEGIN_SRC clojure :results silent
(definst noisey [attack 1 sustain 1 release 1 vol 0.4 length 3] 
  (* (env-gen (lin attack sustain release) 1 1 0 length FREE)
     (pink-noise) ; also have (white-noise) and others...
     vol))

(noisey)
 #+END_SRC

*** What are the arguments to env-gen?
#+BEGIN_SRC clojure
overtone.core/env-gen
([envelope gate level-scale level-bias time-scale action])
  
  [envelope :none, gate 1.0, level-scale 1.0, level-bias 0.0, time-scale 1.0, action 0]

  envelope    - An Array of Controls. 
  gate        - This triggers the envelope and 
                holds it open while > 0. If the 
                envelope is fixed-length (e.g. 
                perc), the gate argument is used 
                as a simple trigger. If it is an 
                sustaining envelope (e.g. adsr, 
                asr), the envelope is held open 
                until the gate becomes 0, at which 
                point is released. If the gate of 
                an env-gen is set to -1 or below, 
                then the envelope will cutoff 
                immediately. The time for it to 
                cutoff is the amount less than -1, 
                with -1 being as fast as possible, 
                -1.5 being a cutoff in 0.5 
                seconds, etc. The cutoff shape is 
                linear. 
  level-scale - Scales the levels of the 
                breakpoints. 
  level-bias  - Offsets the levels of the 
                breakpoints. 
  time-scale  - Scales the durations of the 
                segments. 
  action      - An integer representing an action 
                to be executed when the env is 
                finished playing. This can be used 
                to free the enclosing synth, etc. 

  Envelope generator, interpolates across a path of control 
  points over time, see the overtone.sc.envelope functions 
  to generate the control points array

  Note:

  The actual minimum duration of a segment is not zero, but 
  one sample step for audio rate and one block for control 
  rate. This may result in asynchronicity when in two 
  envelopes of different number of levels, the envelope 
  times add up to the same total duration. Similarly, when 
  modulating times, the new time is only updated at the end 
  of the current segment - this may lead to asynchronicity 
  of two envelopes with modulated times. 

  Categories: Envelopes
  Rates: [ :ar, :kr ]
  Default rate: :kr

#+END_SRC

*** consider the some underappreciated differences about the sounds you will make
UGen vs. SynthNode!
#+BEGIN_SRC clojure
(type (sin-osc))
#+END_SRC

#+RESULTS:
: overtone.sc.machinery.ugen.sc_ugen.SCUGen

#+BEGIN_SRC clojure
(type (noisey))
#+END_SRC

#+RESULTS:
: overtone.sc.node.SynthNode

*** "Tour the Ugens?" or develop a system for exploration
Understanding what "insts" and "synths" are, what to put in them, and
how to put together all the ugens in some way that makes it fun and
meaningful to achieve your sonic goals is not easy.

For me, it is essential to be able to interact with sounds once they
are going. The most intuitive way for me to do that is with a
keyboard. Which means we'll want to get jumping on MIDI controller
interactions.

[[file:][file:~/Github-repos/post-tonal-overtone/src/post_tonal_overtone/org_files/simplest-org-documentation/]]


*** understand definst vs. defsynth
links
[[file:~/Github-repos/overtone-source/src/overtone/sc/synth.clj][file:~/Github-repos/overtone-source/src/overtone/sc/synth.clj]]
[[file:~/Github-repos/overtone-source/src/overtone/studio/inst.clj][file:~/Github-repos/overtone-source/src/overtone/studio/inst.clj]]
**** definst definition
#+BEGIN_SRC clojure
(defmacro definst
  "Define an instrument and return a player function. The instrument
  definition will be loaded immediately, and a :new-inst event will be
  emitted. Expects a name, an optional doc-string, a vector of
  instrument params, and a ugen-form as its arguments.

  Instrument parameters are a vector of name/value pairs, for example:

  (definst inst-name [param0 value0 param1 value1 param2 value2] ...)

  The returned player function takes any number of positional
  arguments, followed by any number of keyword arguments. For example,
  all of the following are equivalent:

  (inst-name 0 1 2)
  (inst-name 0 1 :param2 2)
  (inst-name :param1 1 :param0 0 :param2 2)

  Omitted parameters are given their default value from the
  instrument's parameter list.

  A doc string may also be included between the instrument's name and
  parameter list:

  (definst lucille
    \"What's that Lucille?\"
    [] ...)

  Instruments are similar to basic synths but still differ in a number
  of notable ways:

  * Instruments will automatically wrap the body of code given in an
    out ugen. You do not need to include an out ugen yourself. For
    example:

    (definst foo [freq 440]
      (sin-osc freq))

    is similar to:

    (defsynth foo [freq 440]
      (out 0 (sin-osc freq))))

  * Instruments are limited to 1 or 2 channels. Instruments with more
    than 2 channels are allowed, but additional channels will not be
    audible. Use the mix and pan2 ugens to combine multiple channels
    within your inst if needed. For example:

    (definst bar
      [f1 100 f2 200 f3 300 f4 400]
      (mix (pan2 (sin-osc [f1 f2 f3 f4]) [-1 1 -1 1])))

  * Each instrument is assigned its own group which all instances will
    automatically be placed in. This allows you to control all of an
    instrument's running synths with one command:

    (ctl inst-name :param0 val0 :param1 val1)

    You may also kill all of an instrument's running synths:

    (kill inst-name)

  * A bus and bus-mixer are created for each instrument. This allows
    you to control the volume or pan of the instrument group with one
    command:

    (inst-pan! bar -1)     ;pan hard left.
    (inst-volume! bar 0.5) ;half the volume.

    For a stereo inst, you can control left and right pan or volume
    separately by passing an additional arg:

    (inst-pan! bar 1 -1)   ;ch1 right, ch2 left.
    (inst-volume! bar 0 1) ;mute ch1.

  * Each instrument has an fx-chain to which you can add any number of
    'fx synths' using the inst-fx function.
  "
  {:arglists '([name doc-string? params ugen-form])}
  [i-name & inst-form]
  (let [[i-name params ugen-form] (synth-form i-name inst-form)
        i-name                    (with-meta i-name (merge (meta i-name) {:type ::instrument}))]
    `(def ~i-name (inst ~i-name ~params ~ugen-form))))
#+END_SRC

**** defsynth definition
#+BEGIN_SRC clojure
(defmacro defsynth
  "Define a synthesizer and return a player function. The synth
  definition will be loaded immediately, and a :new-synth event will be
  emitted. Expects a name, an optional doc-string, a vector of synth
  params, and a ugen-form as its arguments.

  (defsynth foo [freq 440]
    (out 0 (sin-osc freq)))

  is equivalent to:

  (def foo
    (synth [freq 440] (out 0 (sin-osc freq))))

  Params can also be given rates. By default, they are :kr, however
  another rate can be specified by using either a pair of [default rate]
  or a map with keys :default and rate:

  (defsynth foo [freq [440 :kr] gate [0 :tr]] ...)
  (defsynth foo [freq {:default 440 :rate :kr}] ...)

  A doc string can also be included:
  (defsynth bar
    \"The phatest space pad ever!\"
    [] (...))

  The function generated will accept a target vector argument that
  must come first, containing position and target as elements (see the
  node function docs).

  ;; call foo player with default args:
  (foo)

  ;; call foo player specifying node should be at the tail of group 0
  (foo [:tail 0])

  ;; call foo player with positional arguments
  (foo 440 0.3)

  ;; target node to be at the tail of group 0 with positional args
  (foo [:tail 0] 440 0.3)

  ;; or target node to be at the head of group 2
  (foo [:head 2] 440 0.3)

  ;; you may also use keyword args
  (foo :freq 440 :amp 0.3)

  ;; which allows you to re-order the args
  (foo :amp 0.3 :freq 440 )

  ;; you can also combine a target vector with keyword args
  (foo [:head 2] :amp 0.3 :freq 440)

  ;; finally, you can combine target vector, keywords args and
  ;; positional args. Positional args must go first.
  (foo [:head 2] 440 :amp 0.3)"
  [s-name & s-form]
  {:arglists '([name doc-string? params ugen-form])}
  (let [[s-name params ugen-form] (synth-form s-name s-form)]
    `(def ~s-name (synth ~s-name ~params ~ugen-form))))
#+END_SRC
** control sound in real time with a MIDI controller
*** are you connected to a controller?
:PROPERTIES:
:ID:       2A392B91-CD13-41A8-ADA1-00891B6B072F
:END:

#+BEGIN_SRC clojure :results silent
(midi-connected-devices)
#+END_SRC


quickly check the output dump: 

#+BEGIN_SRC clojure :results silent
(event-debug-on)
#+END_SRC

Full-fledged note on/off messages are awful. Turn it off quickly

#+BEGIN_SRC clojure :results silent
(event-debug-off)
#+END_SRC

*** create a very simple instrument to control
#+NAME: def-boop
#+BEGIN_SRC clojure :results silent
(definst boop [note 60 amp 0.3]
  (let [freq (midicps note)]
    (* amp (sin-osc freq))))

#+END_SRC

#+RESULTS:
: #<instrument: boop>

#+BEGIN_SRC clojure
(demo (boop))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 53>

*** you will rely on 'midi-poly-player' to control your instrument
#+BEGIN_SRC clojure :results silent
(def booper (midi-poly-player boop))
#+END_SRC

#+RESULTS:
: #'user/booper

*** It's pretty primitive to listen to tones pile up

Not enough to call =(stop)=, you will want to eliminate this whole
"player," though not the /instrument/. This is a two-step process!

NB. This two-step process, however, will still leave a residue of error messages in the REPL.

You really want to avoid this whole thing and prefer the "event-handler" approach below.

Set that shit to nil!
#+BEGIN_SRC clojure :results silent
(def booper (midi-poly-player nil))
#+END_SRC

#+RESULTS:
: #'user/booper


#+BEGIN_SRC clojure :results silent
(midi-player-stop)
#+END_SRC

#+RESULTS:
: :handler-removed

*** Better to use an "event-handler" with ~on-event~
Just a one-step process to eliminate the player (NB. uses a "synth/inst" that must have been defined earlier)


#+BEGIN_SRC clojure :results silent
(on-event [:midi :note-on]
          (fn [e]
            (let [note (:note e)
                  vel  (:velocity e)]
              (boop note (* 0.01 vel))))
          ::boop-handler)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::boop-handler)
#+END_SRC

Note, there's a lot more to explore about "event-handling" with ~on-event~

*** natural sounds have an envelope
    :PROPERTIES:
    :ID:       D4B65EA9-5B5B-488A-A58F-38228AD2B65F
    :END:
but what you really want is a sound that decays!
And that "frees" the "synth" when done.

#+BEGIN_SRC clojure :results silent
(definst steel-drum [note 60 amp 0.8]
  (let [freq (midicps note)]
    (* amp
       (env-gen (perc 0.01 0.2) 1 1 0 1 :action FREE)
       (+ (sin-osc (/ freq 2))
          (rlpf (saw freq) (* 1.1 freq) 0.4)))))
#+END_SRC

#+RESULTS:
: #<instrument: steel-drum>

#+BEGIN_SRC clojure :results silent
(on-event [:midi :note-on]
          (fn [e]
            (let [note (:note e)
                  vel  (:velocity e)]
              (steel-drum note (* 0.01 vel))))
          ::steeldrum-handler)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::steeldrum-handler)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def player (midi-poly-player steel-drum))
#+END_SRC

#+RESULTS:
: #'user/player

#+BEGIN_SRC clojure :results silent
(def player (midi-poly-player nil))
#+END_SRC

#+RESULTS:
: #'user/player


#+BEGIN_SRC clojure :results silent
(midi-player-stop)
#+END_SRC

** now let's use the control change knob for real time interaction
*** [#B] control volume on the old, simple 'anoise' inst
We will use the ~ctl~ function with our event-handler in order to send messages to the "already-defined synth," i.e. to the block of code that was evaluated by the server and now constitutes an object that we can communicate with "on the server."

Make sure it's working
#+BEGIN_SRC clojure :results silent
(anoise)
#+END_SRC

Must be playing the anoise!


#+BEGIN_SRC clojure :results silent
(on-event [:midi :control-change] (fn [{cc-channel :note velocity :velocity}]
                                    (ctl anoise :vol (scale-range velocity 1 127 0 1)))
          ::cc-player)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-player)
#+END_SRC


*** get a noise to filter with that knob
#+BEGIN_SRC clojure :results silent
(definst an-fnoise [vol 0.1 ffreq 1000]
  (lpf (* (pink-noise)
          vol)
       ffreq))

#+END_SRC

#+BEGIN_SRC clojure :results silent
(an-fnoise 0.7)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(on-event [:midi :control-change] (fn [{cc-channel :note velocity :velocity}]
                                     (ctl an-fnoise :ffreq (scale-range velocity 1 127 100 8000))
                                         10) ;; why this?
          ::cc-filterplayer)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-filterplayer)
#+END_SRC

** can you control more than one parameter with your controller?

*** use a 'cond' to match the cc-channel number (which comes in as a "note")
Make sure an-fnoise is playing!
#+BEGIN_SRC clojure :results silent
(on-event [:midi :control-change]
          (fn [{cc-channel :note vel :velocity}]
            (cond (= cc-channel 1) (ctl an-fnoise :vol (scale-range vel 1 127 0 1))
                  (= cc-channel 2) (ctl an-fnoise :ffreq (scale-range vel 1 127 200 8000))))
          ::pooper)
#+END_SRC



#+BEGIN_SRC clojure :results silent
(remove-event-handler ::pooper)
#+END_SRC

** with a basic interface in place, let's load soundfiles 
   :PROPERTIES:
   :ID:       27F16332-267D-4954-8122-C06D68096767
   :END:
*** loading files into buffers
These can produce "vars" in unexpected or inaccessible namespaces,
depending on how you started up overtone.

For example, having recently visited an actual .clj file...

: #'overtone.examples.synthesis.filters/goldberg-slow#'overtone.examples.synthesis.filters/yancey

But, starting cider simply from my post-tonal-overtone project
directory, and evaluating the following blocks places the vars in the
"user" namespace

: #'user/goldberg-slow#'user/yancey
#+BEGIN_SRC clojure
(def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

(def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))
#+END_SRC


*** granular synthesis
#+BEGIN_SRC clojure
(def gran-buf (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))
#+END_SRC

#+RESULTS:
: #'user/gran-buf


#+BEGIN_SRC clojure
(definst gran [] (play-buf 1 gran-buf))
#+END_SRC

#+RESULTS:
: #<instrument: gran>


#+BEGIN_SRC clojure
(gran)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/gran 68>


#+BEGIN_SRC clojure
  (definst mouse-grainy [b 0]
    (let [trate (mouse-y:kr 1 30)
          dur (/ 2 trate)]
      (t-grains:ar 1 (impulse:ar trate) b 1 (mouse-x:kr 0 (buf-dur:kr b)) dur 0 0.8 2)))


#+END_SRC

#+RESULTS:
: #<instrument: grainy>


#+BEGIN_SRC clojure
(mouse-grainy gran-buf)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/grainy 73>

*** add cc control to t-grains (trate with CC, pos with Mouse-x

**** use mouse-x
#+BEGIN_SRC clojure
  (definst grainy-ctl [b 0 trate 1 amp 0.8]
    (let [trate trate
          dur (/ 2 trate)]
      (t-grains:ar 1 (impulse:ar trate) b 1 (mouse-x:kr 0 (buf-dur:kr b)) dur 0 amp 2)))

#+END_SRC

#+RESULTS:
: #<instrument: grainy-ctl>




#+BEGIN_SRC clojure
(grainy-ctl :b 1 :trate 0.25)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/grainy-ctl 63>



#+BEGIN_SRC clojure
(ctl grainy-ctl :trate 0.5)
#+END_SRC

#+RESULTS:
: #overtone.studio.inst.Inst{:name "grainy-ctl", :params ({:name "b", :default 0.0, :rate :kr, :value #atom[0.0 0x6f835023]} {:name "trate", :default 1.0, :rate :kr, :value #atom[1.0 0x5f3815c6]} {:name "amp", :default 0.8, :rate :kr, :value #atom[0.8 0x3e38119f]}), :args ("b" "trate" "amp"), :sdef {:name "user/grainy-ctl", :constants [0.0 2.0 1.0 18.0 0.2], :params (0.0 1.0 0.8), :pnames ({:name "b", :index 0} {:name "trate", :index 1} {:name "amp", :index 2}), :ugens ({:args nil, :special 0, :name "Control", :rate 1, :inputs (), :rate-name :kr, :n-outputs 3, :id 354, :outputs ({:rate 1} {:rate 1} {:rate 1}), :n-inputs 0} #<sc-ugen: impulse:ar [1]> #<sc-ugen: buf-dur:kr [1]> #<sc-ugen: mouse-x:kr [2]> #<sc-ugen: binary-op-u-gen:kr [1]> #<sc-ugen: t-grains:ar [9]> #<sc-ugen: out:ar [10]>)}, :group #<synth-group[live]: Inst grainy-ctl Container 56>, :instance-group #<synth-group[live]: Inst grainy-ctl 57>, :fx-group #<synth-group[live]: Inst grainy-ctl FX 58>, :mixer #<synth-node[live]: overtone.stu547/mono-inst-mixer 59>, :bus #<audio-bus: No Name, mono, id 18>, :fx-chain [], :volume #atom[1.0 0x3a764b06], :pan #atom[0.0 0x3c331f8], :n-chans 1}

**** use midi control-change message
Why does the handler function take a "10" as an argument
#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (fn [{cc-channel :note velocity :velocity}]
            (ctl grainy-ctl :trate (scale-range velocity 1 127 0.1 3)) 10)
              ::cc-grainyctl)
#+END_SRC

#+RESULTS:
: :added-async-handler


#+BEGIN_SRC clojure
(remove-event-handler ::cc-grainyctl)
#+END_SRC

** you're going to need timing and abstract data manipulation functions
*** use a 'metronome'
#+BEGIN_SRC clojure :results silent
(def slow-metro (metronome 15))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(slow-metro)
#+END_SRC

*** you can use at and apply-at for scheduling
Note, that this is the same as simply calling 'gran' by itself!
#+BEGIN_SRC clojure :results silent
(at (now) (gran))
#+END_SRC

But, because this is just a function definition...what will happen?
#+BEGIN_SRC clojure :results silent
(defn play-gran-now []
(at (now) (gran)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(play-gran-now)
#+END_SRC

*** or you can use instead Supercollider Ugen timing machinery
#+BEGIN_SRC clojure :results silent
(impulse 1)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(definst slow-grain [b 0] 
(t-grains:ar 1 (impulse:ar 1) b 1 (line 0 (buf-dur:kr 0) 300) 1 0 0.8 2))
#+END_SRC



#+BEGIN_SRC clojure
(slow-grain)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/slow-grain 111>


#+BEGIN_SRC clojure :results silent
(definst slow-grain2 [b 0] 
(t-grains:ar 1 (impulse:ar 0.5) b 1 (line 0 (buf-dur:kr 0) 600) 2 0 0.8 4))

(slow-grain2)
#+END_SRC

*** everything sounds better with some reverb                      :reverb:
A basic reverb player
#+BEGIN_SRC clojure :results silent
(defsynth reverb-on-left []
  (let [dry (play-buf 1 gran-buf)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

(reverb-on-left)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(defsynth reverb-wet-only []
  (let [dry (play-buf 1 gran-buf)
    wet (free-verb dry :mix 1 :damp 0.1 :room 0.9)]

    (out 0 [wet dry])))

(reverb-wet-only)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (definst slow-grain-reverb [b 0] 
  (free-verb (t-grains:ar 1 (impulse:ar 0.5) b 1 (line 0 (buf-dur:kr 0) 600) 2 0 1 4)
             :mix 0.5
             :damp 0.1
             :room 0.9))

  (slow-grain-reverb)
#+END_SRC

* Going Further with tutorials in this project

after a bit of work, a need for building "artist-specific"
abstractions arises, to say nothing of a deeper understanding of both
fundamentals that you take for granted and some nice patterns, styles
and workflows that tend to emerge after extended usage.

** Using and Augmenting Official Documentation for Overtone (and Clojure)
*** -rw-r--r--  1 b  staff    1293 Dec 30 14:03 README.org
*** -rw-r--r--  1 b  staff   28049 Feb  1 20:25 overtone-cheatsheet.org
*** -rw-r--r--  1 b  staff  232853 Feb 15 19:40 overtone-cheatsheet-in-one-org-subtree.org
*** -rw-r--r--  1 b  staff   10566 Feb 15 20:19 my-documented-overtone-cheatsheet.org
*** -rw-r--r--  1 b  staff    6046 Feb 14 21:33 simple-clojure-notes.org
** Exploring Electronic Music Basics and Techniques
*** -rw-r--r--  1 b  staff     820 Feb  7 10:39 electronic-music-basics.org
*** -rw-r--r--  1 b  staff   11014 Feb 15 09:04 granular-synth-focused.org
** Literate Programming-style Overtone walk throughs
*** -rw-r--r--  1 b  staff   23437 Feb 15 20:21 my-basic-overtone-tutorial.org
*** -rw-r--r--  1 b  staff   37958 Feb 15 20:13 more-advanced-overtone-exploring.org
*** -rw-r--r--  1 b  staff   35464 Feb 14 14:27 resonate2013-tutorials.org
** understanding workflow, tools, and idiomatic patterns for your domain.

Numbers and programming constructs are used to represent more than
just the values that translate computer memory to sound.

You will be getting to a point where you can use them to represent
arbitrary things of your own conception; lists of numbers as pieces of
something for anything!

It will help to be able to internal idiomatic usages of both the
Clojure language, as well as idiomatic ways to translate common
Supercollider constructs.

To do so, you will want to be developing certain basic abstractions
that are unique to you and your particular artistic needs and
interests. Additionally, you will want a way to explore documentation
conveniently, efficiently and, "funly!"

See the next stage of org-mode documentation:

[[id:62D39834-5A93-49BB-80CD-6475FD7C1D6D][Building up more sophisticated Controller abstractions]]
