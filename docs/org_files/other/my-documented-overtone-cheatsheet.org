* Orzo Tours o' UGens (doc and examples)
** lf-cub
#+BEGIN_SRC clojure :results silent
;; loud and unpleasant!
(demo (* 0.1 (lf-pulse:ar 800 0)))
#+END_SRC

#+begin_example
-------------------------
overtone.core/lf-cub
([freq iphase])
  
  [freq 440.0, iphase 0.0]

  freq   - Frequency in Hertz 
  iphase - Initial phase offset. For efficiency 
           reasons this is a value ranging from 0 
           to 2. 

  An oscillator outputting a sine like shape made of two 
  cubic pieces 

  Categories: 
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

** lf-noise0, lf-noise1 etc
*** lf-noise0
#+BEGIN_SRC clojure :results output
(doc lf-noise0)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/lf-noise0
([freq])
  
  [freq 500.0]

  freq - Approximate rate at which to generate 
         random values. 

  Generates random values between -1 and 1 at a rate (the 
  rate is not guaranteed but approximate) 

  Categories: Generators -> Stochastic
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example
*** lf-noise1
#+BEGIN_SRC clojure :results output
(doc lf-noise1)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/lf-noise1
([freq])
  
  [freq 500.0]

  freq - Approximate rate at which to generate 
         random values. 

  Generates linearly interpolated random values between -1 
  and 1 at the supplied rate (the rate is not guaranteed but 
  approximate). 

  Categories: 
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example
*** lf-noise2
#+BEGIN_SRC clojure :results output
(doc lf-noise2)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/lf-noise2
([freq])
  
  [freq 500.0]

  freq - Approximate rate at which to generate 
         random values. 

  Generates quadratically interpolated random values between 
  -1 and 1 at the supplied rate (the rate is not guaranteed 
  but approximate).

  Note: quadratic interpolation means that the noise values 
  can occasionally extend beyond the normal range of +-1, if 
  the freq varies in certain ways. If this is undesirable 
  then you might like to clip2 the values or use a 
  linearly-interpolating unit instead. 

  Categories: 
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

*** lf-clip-noise
#+BEGIN_SRC clojure :results output
(doc lf-clip-noise)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/lf-clip-noise
([freq])
  
  [freq 500.0]

  freq - Approximate rate at which to generate 
         random values. 

  Randomly generates the values -1 or +1 at a rate given by 
  the nearest integer division of the sample rate by the 
  freq argument. It is probably pretty hard on your 
  speakers! 

  Categories: 
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

*** lfd-noise0
#+BEGIN_SRC clojure :results output
(doc lfd-noise0)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/lfd-noise0
([freq])
  
  [freq 500.0]

  freq - Rate at which to generate random values. 

  Like lf-noise0, it generates random values between -1 and 
  1 at a rate given by the freq argument, with two 
  differences: p * no time quantization

  * fast recovery from low freq values.

  (lf-noise0,1,2 quantize to the nearest integer division of 
  the samplerate and they poll the freq argument only when 
  scheduled, and thus seem to hang when freqs get very 
  low).

  If you don't need very high or very low freqs, or use 
  fixed freqs lf-noise0 is more efficient. 

  Categories: 
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

*** lfd-noise1
*** lfd-noise3
*** ldf-clip-noise
*** dust
#+BEGIN_SRC clojure :results output
(doc dust)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/dust
([density])
  
  [density 0.0]

  density - Average number of impulses per second 

  Generates random impulses from 0 to +1. 

  Categories: Generators -> Stochastic
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

*** dust2
#+BEGIN_SRC clojure :results output
(doc dust2)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/dust2
([density])
  
  [density 0.0]

  density - Average number of impulses per second. 

  Generates random impulses from -1 to +1. 

  Categories: Generators -> Stochastic
  Rates: [ :ar, :kr ]
  Default rate: :ar
#+end_example

** ring1, ring2
*** ring1 ((a*b) + a)

#+begin_example
-------------------------
overtone.live/ring1
([a b])
  
  Ring modulation plus first source 

  [a :none, b :none]

  a - First input 
  b - Second input 

  Return the value of ((a*b) + a). This is more efficient 
  than using separate unit generators for the multiply and 
  add. 

  Categories: Binary Operations
  Rates: [ :ir, :dr, :ar, :kr ]
  Default rate: :auto
#+end_example
*** ring2 ((a*b) + a + b)
#+begin_example
-------------------------
overtone.live/ring2
([a b])
  
  Ring modulation plus both sources 

  [a :none, b :none]

  a - First input 
  b - Second input 

  Return the value of ((a*b) + a + b). This is more 
  efficient than using separate unit generators for the 
  multiply and adds. 

  Categories: Binary Operations
  Rates: [ :ir, :dr, :ar, :kr ]
  Default rate: :auto
#+end_example

*** ring3 (a * a * b)

#+begin_example
-------------------------
overtone.live/ring3
([a b])
  
  Ring modulation variant 

  [a :none, b :none]

  a - First input 
  b - Second input 

  Return the value of (a * a * b). This is more efficient 
  than using separate unit generators for each multiply. 

  Categories: Binary Operations
  Rates: [ :ir, :dr, :ar, :kr ]
  Default rate: :auto
#+end_example

*** ring4 ((a * a * b) - (a * b * b))

#+begin_example
-------------------------
overtone.live/ring4
([a b])
  
  Ring modulation variant 2 

  [a :none, b :none]

  a - First input 
  b - Second input 

  Return the value of ((a * a * b) - (a * b * b)). This is 
  more efficient than using separate unit generators for 
  each operation. 

  Categories: Binary Operations
  Rates: [ :ir, :dr, :ar, :kr ]
  Default rate: :auto
#+end_example

** ring examples
*** sin-osc and pink-noise:kr
#+BEGIN_SRC clojure :results silent
(demo 10  (ring1 (sin-osc) (pink-noise:kr)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10  (+ (sin-osc) (* 5 (pink-noise:kr))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10  (ring2 (sin-osc) (pink-noise:kr)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10  (ring3 (sin-osc) (pink-noise:kr)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10  (ring4 (sin-osc) (pink-noise:kr)))
#+END_SRC

*** understanding adding and multiplying ugens
#+BEGIN_SRC clojure :results silent
(demo 5 (ring1 (sin-osc) (sin-osc:kr 1)))
#+END_SRC

Equivalent to:

#+BEGIN_SRC clojure :results output
(demo (+ (sin-osc) (* (sin-osc:kr 1) (sin-osc))))
#+END_SRC

#+RESULTS:

Ring3

#+BEGIN_SRC clojure :results silent
(demo 10 (* (sin-osc) (sin-osc:kr 10) (pink-noise:kr))) 
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (- (* (sin-osc) (sin-osc:kr 10) (pink-noise:kr)) (* (sin-osc) (pink-noise:kr) (pink-noise:kr))))
#+END_SRC

*** Will only print to REPL
#+BEGIN_SRC clojure :results silent
(run (poll:kr (impulse:kr 10) (+ 1 (sin-osc:kr))))

(run (poll:kr (impulse:kr 10) (+ 0 (sin-osc:kr))))
#+END_SRC

** use =run= with poll
Should print out to repl
#+BEGIN_SRC clojure :results output
(run (poll:kr (impulse:kr 5) (+ 0 (sin-osc:kr))))
#+END_SRC

#+RESULTS:

** prefer =scope= to =run= for waveforms
Not automatically loaded with .live
#+BEGIN_SRC clojure
(use 'overtone.studio.scope)
#+END_SRC

*** scope

  "Throws an exception if the server isn't internal - scope relies on
  fast access to shared buffers with the server which is currently only
  available with the internal server. Also ensures server is
  connected."
** [#A] Tour of UGen examples translated
:PROPERTIES:
:ID:       5D5E462C-92EE-4896-82A5-E0B6DE501BEF
:END:

*** LF (Low Frequency UGens)

**** Low Frequency UGens as one-liners
:PROPERTIES:
:ID:       E8F1B9F7-E3AC-4784-9784-691D2C3C23FE
:END:
#+BEGIN_SRC clojure :results silent
(demo 10 (lf-par:ar (+ 800 (* 400 (lf-par:kr 0.2 0))) 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (lf-par:ar (+ 800 (* 400 (lf-par:kr (+ 10 (* 8 (lf-par:kr 0.2 0))) 0)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (lf-cub:ar (+ 800 (* 400 (lf-cub:kr (+ 10 (* 8 (lf-cub:kr 0.2 0)))))) 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (lf-tri:ar (+ 800 (* 400 (lf-tri:kr (+ 10 (* 8 (lf-tri:kr 0.2 0)))))) 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (lf-saw:ar (+ 800 (* 400 (lf-saw:kr (+ 10 (* 8 (lf-saw:kr 0.2 0)))))) 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (impulse:ar (+ 800 (* 400 (lf-saw:kr (+ 10 (* 8 (lf-saw:kr 0.2 0)))))) 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (lf-pulse:ar 800 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 7 (lf-pulse:ar (* 0.1 (x-line:kr 100 15000 6)) 0 0.5 ))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 8 (lf-pulse:ar (+ 0.1 (* 0.5 (x-line:kr 100 15000 6)))))
#+END_SRC



#+BEGIN_SRC clojure :results silent
(demo 10 (lf-pulse:ar (* 0.1 (+ 200 (* 200 (lf-pulse:kr 3 0 0.3)))) 0 0.2)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (lf-pulse:ar (+ 800 (* 400 (lf-pulse:kr (+ 10 (* 8 (lf-pulse:kr 0.2 0)))))) 0))
#+END_SRC

* Misc. Notes on project of developing your own "grimoire" incrementally
** name space (if gets messed up looking at .clj files
#+BEGIN_SRC clojure
(in-ns 'user)
#+END_SRC

#+RESULTS:
: #namespace[user]
** UGens Category Broswer from Supercollider Tutorial
*** UGens
*** for examples, see: [[id:03FDC781-8605-442B-AF5C-1AA04BAF2306][title:: Tour of UGens]] 
** ideas for UGen exploration abstraction
*** default atoms
Most of the examples in the Tour of UGens involve at most a handful or
so of basic arguments

- freq
- phase
- mult
- add
- width
- sync-freq
- saw-freq
- num-harmonics
- bufnum
- beat-freq
- density
- chaos-param
- in
- rq :: (reciprocal of the Q of the filter (bandwidth in HZ = rq * hz)
- ring-time
- amplitudes
- pan-position
- level
- right-in
- left-in
- num-channels
- crossfade
- in1
- in2
- mix :: dry/wet balance
- room :: room size
- damp :: Reverb HF damp
- roomsize
- revtime
- damping
- inputbw
- spread
- drylevel
- earlyreflevel
- taillevel
- maxroomsize
- max-delay
- cur-delay
- echo-delay
- trigger
- start-pos
- loop
- rate
- centerpos
- duration (or 'dur')
- pan
- interp
- trig-rate
- win-size
- decay-time
- attack-time
- delay-time
- reset
- div
- start
