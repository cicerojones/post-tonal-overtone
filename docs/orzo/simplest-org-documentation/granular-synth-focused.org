* automate TGrains listening
** use line:kr to move through centerpos
:PROPERTIES:
:ID:       326223F4-AA19-4058-A07C-3E5F5DB9AFF5
:END:

Is there a problem with this one?

#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

Plays almost exactly like regular track
#+BEGIN_SRC clojure :results silent
(def gold-line (tgrains-line-synth :buffer 7))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def yanc-line (tgrains-line-synth :buffer 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def gold-line3 (tgrains-line-synth :trate 0.5 :duration-mult 3 :dur-numerator 8))
#+END_SRC

#+BEGIN_SRC clojure
(ctl gold-line3  :trate 0.3 :dur-numerator 12)
#+END_SRC

#+RESULTS:
: #<synth-node[live]: user/tgrains-line-synth 685>

* Mastering Granular Synthesis
  :PROPERTIES:
  :VISIBILITY: content
  :END:
** t-grains documentation
#+BEGIN_SRC clojure 
overtone.core/t-grains
([num-channels trigger bufnum rate center-pos dur pan amp interp])
  
  [num-channels 2, trigger 0, bufnum 0, rate 1, center-pos 0, dur 0.1, pan 0.0, amp 0.1, interp 4]

  num-channels - Number of output channels 
  trigger      - At each trigger, the following 
                 arguments are sampled and used as 
                 the arguments of a new grain. A 
                 trigger occurs when a signal 
                 changes from <= 0 to > 0. If the 
                 trigger is audio rate then the 
                 grains will start with sample 
                 accuracy. 
  bufnum       - The index of the buffer to use. 
                 It must be a one channel (mono) 
                 buffer. 
  rate         - 1.0 is normal, 2.0 is one octave 
                 up, 0.5 is one octave down -1.0 
                 is backwards normal rate. Unlike 
                 PlayBuf, the rate is multiplied 
                 by BufRate, so you needn't do 
                 that yourself. 
  center-pos   - The position in the buffer in 
                 seconds at which the grain 
                 envelope will reach maximum 
                 amplitude. 
  dur          - Duration of the grain in seconds 
  pan          - A value from -1 to 1. Determines 
                 where to pan the output in the 
                 same manner as PanAz. 
  amp          - Amplitude of the grain. 
  interp       - 1,2,or 4. Determines whether the 
                 grain uses (1) no interpolation, 
                 (2) linear interpolation, or (4) 
                 cubic interpolation. 

  Sample playback from a buffer with fine control for doing 
  granular synthesis. Triggers generate grains from a single 
  channel (mono) buffer. Each grain has a Hann envelope 
  (sin^2(x) for x from 0 to pi) and is panned between two 
  channels of multiple outputs. 
#+END_SRC
** SLOW-GRAIN-REVERB: dedicated instrument abstraction for t-grains synths
:PROPERTIES:
:ID:       F109AE32-4289-4A8B-8637-B68D7B4FA5B6
:END:

#+BEGIN_SRC clojure :results silent
;; defaults to buffer 0 (slow-goldberg, in this project)
  ;; #<buffer-info: 184.540590s mono 0>

  (definst slow-grain-reverb [b 0 trigger-rate 1 centerpos 1 grain-dur 0.5] 
(let [trigger-rate (impulse:ar trigger-rate)]
    (free-verb
           (t-grains:ar 1 ;; num-channel
                       trigger-rate
                        b ;; bufnum
                        1 ;; rate
                        centerpos
                        grain-dur
                        0 ;; pan
                        1 ;; amp
                        2 ;; interp
                        )
           :mix 0.2
           :damp 0.1
           :room 0.9)))



#+END_SRC


** misc. manipulations with slow-grain-reverb

#+BEGIN_SRC clojure :results silent
(slow-grain-reverb :b 0)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(ctl slow-grain-reverb :trigger-rate 0.5 :centerpos 4 :grain-dur 1)
#+END_SRC

** following manipulation attempts fail?
#+BEGIN_SRC clojure :results silent
(ctl slow-grain-reverb :trigger-rate 0.3 :centerpos (tenth-inc 0.4) :grain-dur 2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def nome (metronome 60))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl slow-grain-reverb :trigger-rate 0.3 :centerpos (* (nome) 0.5) :grain-dur 2)
#+END_SRC


** general-tgrains as a synth
   :PROPERTIES:
   :ID:       5C575441-0230-4F0B-8F5D-257821ECBA92
   :END:
#+BEGIN_SRC clojure
  (defsynth general-tgrains-synth
    "my main granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:ar trate)
          centerpos centerpos]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC

#+RESULTS:
: #<synth: general-tgrains-synth>

#+BEGIN_SRC clojure
(def gold (general-tgrains-synth :buffer 0 :centerpos (line:kr 0.0 100 30)))
#+END_SRC

** general-tgrains with t-randomness
:PROPERTIES:
:ID:       74504A58-C963-4B11-AEE5-6411D5A37CF4
:END:
#+BEGIN_SRC clojure
  (defsynth general-trand-synth
    "stochastic granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:kr trate)
          centerpos (+ centerpos (t-rand:kr 0 0.01 clk))]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC

#+RESULTS:
: #<synth: general-trand-synth>

#+BEGIN_SRC clojure
(def gtrand-synth1 (general-trand-synth 1))
#+END_SRC

#+RESULTS:
: #'user/gtrand-synth1

#+BEGIN_SRC clojure 
(ctl gtrand-synth1 :centerpos 100)
#+END_SRC

#+RESULTS:
: #<synth-node[live]: user/general-trand-synth 55>

* granular synth examples in sclang
** examples to be translated to Overtone
*** supercollider TGrain examples
#+END_SRC

#+BEGIN_SRC sclang 
  b = Buffer.read(s, Platform.resourceDir +/+ "sounds/full-time-mono.wav");
#+END_SRC

#+BEGIN_SRC sclang 
  //   ~variation1 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
#+END_SRC
#+COMMENT change /clk/=Dust, dur= 4 / trate
*** uses dust!
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = MouseY.kr(8,120,1);
          dur = 4 / trate;
          clk = Dust.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** some flanging
#+COMMENT change /trate/= depends on MouseY and some Triangle+Lin regularity
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = LinExp.kr(LFTri.kr(MouseY.kr(0.1,2,1)),-1,1,8,120);
          dur = 12 / trate;
          clk = Impulse.ar(trate);
          pos = MouseX.kr(0,BufDur.kr(b));
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** TRand on centerpos makes more natural grains
#+COMMENT change /dur/= small sensitive to MouseY
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = 12;
          dur = MouseY.kr(0.2,24,1) / trate;
          clk = Impulse.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** non Mouse controlled
#+COMMENT change /pos/= BrownNoise sensitive, jumping around (with Integrator.kr)
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = 100;
          dur = 8 / trate;
          clk = Impulse.kr(trate);
          pos = Integrator.kr(BrownNoise.kr(0.001));
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.5);
  }.play;
  )
#+END_SRC
*** [#A] use TGrain playback rate with randomness to skew pitch etc (long grains overlap)
#+COMMENT change /rate/= dependent on exponential whitenoise
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = MouseY.kr(1,400,1);
          dur = 8 / trate;
          clk = Impulse.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b));
          pan = WhiteNoise.kr(0.8);
          TGrains.ar(2, clk, b, 2 ** WhiteNoise.kr(2), pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** change pitch with Playback--shorter single grains
#+COMMENT change /pos/ WhiteNoise, /center pos/=Xmouse sensitive,
# /pan/=White Noise
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur;
          trate = MouseY.kr(2,120,1);
          dur = 1.2 / trate;
          TGrains.ar(2, Impulse.ar(trate), b, (1.2 ** WhiteNoise.kr(3).round(1)), MouseX.kr(0,BufDur.kr(b)), dur, WhiteNoise.kr(0.6), 1);
  }.play;
  )
#+END_SRC
** manipulating best of sc Gran examples
#+BEGIN_SRC sclang
(
{
        var trate, dur, clk, pos, pan;
        trate = MouseY.kr(1,400,1);
        dur = 8 / trate;
        clk = Impulse.kr(trate);
        pos = MouseX.kr(0,BufDur.kr(b));
        pan = WhiteNoise.kr(0.8);
        TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
}.play;
)

#+END_SRC
* top-level vars for use with t-grains
** t-grains arg as plain text
- trigger
- bufnum
- rate
- centerpos
- dur
- pan
- amp
- interp
** local t-grains passed
- trate
- dur
- clk
- pos
- pan<
