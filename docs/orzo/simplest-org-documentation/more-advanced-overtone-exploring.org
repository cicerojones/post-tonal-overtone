* Building up more sophisticated Controller abstractions
:PROPERTIES:
:ID:       62D39834-5A93-49BB-80CD-6475FD7C1D6D
:END:
** stop all sound
#+name: stop-all
#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS: stop-all
: nilnil

#+RESULTS:
: nil

** Abstraction for using CC messages while exploring UGens and documentation
*** can you remember how to make an event handler to modify two parameters (use 'cond')
Here's you "synth:"

#+BEGIN_SRC clojure :results silent
(definst an-fnoise [vol 0.1 ffreq 1000]
  (lpf (* (pink-noise)
          vol)
       ffreq))

#+END_SRC

#+BEGIN_SRC clojure :results silent
(an-fnoise 0.7)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(on-event [:midi :control-change]
          (fn [{cc-channel :note vel :velocity}]
            (cond (= cc-channel 1) (ctl an-fnoise :vol (scale-range vel 1 127 0 1))
                  (= cc-channel 2) (ctl an-fnoise :ffreq (scale-range vel 1 127 200 8000))))
          ::pooper)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::pooper)
#+END_SRC
*** Putatative "expanded" version of an-fnoise with CC control
**** code in process

#+BEGIN_SRC clojure :results silent
(definst someother-fnoise [vol 0.1 ffreq 1000]
  (lpf (* (pink-noise)
          vol)
       ffreq))

(someother-fnoise 0.7)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(someother-fnoise :vol 0.6)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl someother-fnoise :ffreq 500)
#+END_SRC

Use atoms for "hot-swapping" values??!!

#+BEGIN_SRC clojure :results silent
  (def ffl (atom 200))
  (def ffh (atom 8000))

#+END_SRC

#+BEGIN_SRC clojure :results silent

  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity}]
              (cond (= cc-channel 1) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                    (= cc-channel 2) (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh))
                    (= cc-channel 3) (reset! ffl (* vel 100))
                    (= cc-channel 4) (reset! ffh (* vel 100))
                    ))
            ::someother-pooper)

#+END_SRC

#+BEGIN_SRC clojure :results silent

    (on-event [:midi :control-change]
              (fn [{cc-channel :note vel :velocity}]
                (cond (= cc-channel 1) (do (reset! ffl (/ vel 127 )) 
                                           (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1)))
                      (= cc-channel 2) (do (reset! ffh (* vel 10))
                                           (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh)))
                      ))
              ::someother-pooper-do)

#+END_SRC


#+BEGIN_SRC clojure
(list @ffl @ffh)
#+END_SRC

#+RESULTS:
| 113/127 | 1500 |

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::someother-pooper)
#+END_SRC

#+BEGIN_SRC clojure :results silent
;;; Note this presents problems; why?
(on-event [:midi :control-change]
          (fn [{cc-channel :note vel :velocity}]
            (cond (= cc-channel 1) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 2) (ctl someother-fnoise :ffreq (scale-range vel 1 127 200 8000))
                  (= cc-channel 3) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 4) (ctl someother-fnoise :ffreq (scale-range vel 1 127 (* 200))
                  (= cc-channel 5) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 6) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 7) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 8) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 40) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 41) (ctl someother-fnoise :ffreq   (scale-range vel 1 127 100 1000))
                  ))
          ::someother-pooper)

#+END_SRC
**** explanation of what's going on in the above code

So, what does this have? 

- =on-event= as function has 1.arguments, 2. a body that is a function, and
  1. name (with double colon)

- the cond in the function body is necessary to direct the messages to
  the proper cc-channel

- the velocity reported for each channel is used with a =ctl= message,
  making some modification of an existing, "playing" synth on the
  server?



the value being passed to the relevant argument of the synth (in this
case, the synth is someother-fnoise, and the argument is either 'vol' or
'ffreq') is the result of being scaled by the "scale-range" function.

We need this function to always take three determined arguments: 

1. the input value (in all these CC cases, this is "vel" or the reported
velocity of the given knob), 

2. the input min and max, which as MIDI messages is constrained to
   1-127

3. an output min and max.

We want to be able to manipulate these on the fly. Let's use another
button to report back a channel and a "velocity"
** reusable atoms of CC values
   :PROPERTIES:
   :ID:       7207D525-54CB-4DAC-BED5-62D70AE8C463
   :END:
#+BEGIN_SRC clojure :results silent
  (def cc1 (atom 0))
  (def cc2 (atom 0))
  (def cc3 (atom 0))
  (def cc4 (atom 0))
  (def cc5 (atom 0))
  (def cc6 (atom 0))
  (def cc7 (atom 0))
  (def cc8 (atom 0))

  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity}]
              (cond (= cc-channel 1) (reset! cc1 val)
                    (= cc-channel 2) (reset! cc2 val)
                    (= cc-channel 3) (reset! cc3 val)
                    (= cc-channel 4) (reset! cc4 val)
                    (= cc-channel 5) (reset! cc5 val)
                    (= cc-channel 6) (reset! cc6 val)
                    (= cc-channel 7) (reset! cc7 val)
                    (= cc-channel 8) (reset! cc8 val)
))
::cc-state)
                  
                  
#+END_SRC

#+BEGIN_SRC clojure :results silent
(list @cc1 @cc2 @cc3 @cc4 @cc5 @cc6 @cc7 @cc8)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-state)
#+END_SRC
** [#A] receive and respond to channel change messages
Print out

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity chan :channel}]
              (println (list cc-channel vel chan)))
              ::list-all)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::list-all)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
            (if (= chan 1) (println chan) (println chan))
             )
::cc-state-if)
#+END_SRC
** print out CC knob, value and channel for all CC-change messages
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
              (println (list cc-channel val chan)))
              ::list-all)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::list-all)
#+END_SRC

* Needed concepts for exploring UGens (polls, scopes)
** scoping (need to understand bus vs. buffer)                      :busses:
Get on the bus!

Bus example from the overtone source has been copied into a single org
example along with all the other examples!

[[id:BC1BF72C-E838-4484-B73D-843F0EEAF72F][Buses]]

[[file:~/Github-repos/overtone-source/src/overtone/examples/buses/getonthebus.clj][file:~/Github-repos/overtone-source/src/overtone/examples/buses/getonthebus.clj]]

#+BEGIN_SRC clojure
(defn scope
  "Create a scope for either a bus or a buffer. Defaults to scoping audio-bus 0.
   Example use:

   (scope a-control-bus)
   (scope a-buffer)
   (scope an-audio-bus)
   (scope :audio-bus 1)
   (scope :control-bus 10)
   (scope :buf 10)"
  ([]        (scope :audio-bus 0))
  ([thing]   (cond
              (audio-bus? thing)   (scope :audio-bus thing)
              (control-bus? thing) (scope :control-bus thing)
              (buffer? thing)      (scope :buf thing)
              :else                (scope :audio-bus thing)))
  ([kind id] (scope kind id false))
  ([kind id keep-on-top?]
     (ensure-internal-server!)
     (let [s  (mk-scope id kind keep-on-top? WIDTH HEIGHT)]
       (dosync (alter scopes* assoc (:id s) s))
       (scopes-start))))
#+END_SRC
** where do you find your UGens, brah?
[[id:CF18101A-0997-454B-875B-206651F0FF17][Overtone Cheat Sheet 0.9.1]]

Oh, of course. Maybe a better question is how to do you systematically
explore UGens, finding interesting and useful things?

First it will help to understand some basic parts of your building
blocks, such as triggering things and reading out values that various
UGens are producing. See polling and running
** Polling and running 
#+BEGIN_SRC clojure 
(run (poll:kr (impulse:kr 10) (abs  (* 1000 (pink-noise:kr))) "polled-val:"))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 112>

#+BEGIN_SRC clojure :results silent
(run (poll:kr (impulse:kr 10) (* 1000 (sin-osc:kr)) "polled-val:"))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(run 20 (poll:kr (impulse:kr 5) (line:kr 0.0 10.0 20)) "polled-val:"))
#+END_SRC
** [#A] make a polling and running macro to read ugen values
:PROPERTIES:
:ID:       FAE2CB90-90F5-4D5E-897F-22419F70FCF0
:END:
#+BEGIN_SRC clojure
(defmacro read-ugen [dur ugen]
`(run ~dur (poll:kr (impulse:kr 2) ~ugen)))
#+END_SRC

#+RESULTS:
: #'user/read-ugen

#+BEGIN_SRC clojure :results output

#+END_SRC

#+RESULTS:

** give oscillator UGens arguments meaningful in Hz (i.e. be aware of 'mul' and 'add')
#+BEGIN_SRC clojure :results silent
;; ouch, watch out!
(demo 10 (sin-osc (abs  (* 10000 (brown-noise:kr)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
;; not so intense
(demo 10 (sin-osc (abs  (+ 300 (* 1000 (pink-noise:kr))))))
#+END_SRC


** read existing SC docs and tutorials and consider patterns
Compare with ugens-tour.org in

[[file:~/Dropbox/AB-local/Documents-new-home/supercollider-files/sc-misc/][file:~/Dropbox/AB-local/Documents-new-home/supercollider-files/sc-misc/]]

[[id:03FDC781-8605-442B-AF5C-1AA04BAF2306][title:: Tour of UGens]]
** develop demo-ing macro (or something) for improved UGen exploring

* systematize use of knob and pad abstractions
** explain use of functions passed to ON-EVENT event-handlers
any key on your MIDI controller has basically two pieces of data associated with it:

- "note" :: a value or name that stays constant
- "velocity" :: a value that typically changes, but can be more
     complicated depeding on what kind of "note" event it is
     associated with

A function that responds to a given key has to do a few things.

First of all, it needs to be included as part of an event-handler, which is created with "on-event," and will be given a keyword name.

The function that drives the event-handling can do a variety of things, and should in most cases have several parameters.

- synth :: we can control any of a variety of synths/instruments
- synth-param :: we want to specify which parameter to control
- controller (pad/knob) number :: which MIDI button to respond to
- place :: the "ref" or "atom" to use for "dereferencing"
- channel :: MIDI messages can be sent via different channels
     (typically 0 or 1 will be default)

Now, depending on what kind of behavior we want out of our controller button, we will need at least one more parameter.

In the case of a knob, which will be turned and will run through a continuous stream of numbers, we will seek to continually set the "place" which stores the value for that knob. That is, we will "reset!" the ref.

In the case of a pad, we might choose to ignore the "velocity" (that is, how "hard" we strike the pad, which can be hard to execute precisely each time and is thus subject to some randomness) and simply use it as "bang." That is, we just tell it to "activate" something.

It can "activate" anything you can imagine that will respond to being "hit." I've used it to "increment/decrement" some value. While a knob ostensibly does the same thing, "banging" a value up or down allows for more precise, fine-grain control. Additionally, it is not subject to the 0-127 values associated with a knob.

So, in the case of using a pad as part of a "counter," we need to pass a "swap!" function, that is, a function to use with =swap!= to adjust the value associated with the current state of the pad. The simplest thing is to just =inc= or =dec= the value.

Whatever particular operation we use the controller to perform, we will always be setting and resetting some value, and it is ideal to be able to know what that value is, as we update it. So, we will want to print out the value everytime it changes.

Of course, all this will appear to happen simultaneously, but this illusion is actually created by wrapping all of these actions into a =do= block, which carries out each action sequentially. Setting the value of "a piece of state" has to happen before we can use that value, so the "setter" will always precede the =ctl= that actually does something with those values.

The "getting" of the value (note the "set/get" binary, which is just one conceptually straightforward way to break down change within this system) happens with =deref= which always returns the current value of a "piece of state." This value will be used with some parameter as named by a /keyword/ that comes from what keywords were given to whichever synth we originally defined.

One last thing to note with the "knob-resetter" is that it takes an optional "scale" argument. This is a bit of a hack that modifies the way that the 0-127 values are translated into the synth. Another way to do this, that may or may not be better depending, would be to use the actual =scale= function that comes with overtone.

Now, when it comes refactoring in general, we might want to think about what kind of (and how much) work a particular function used by the event handler is doing. The following questions might arise:

- Can we print out a more helpful name than the clojure reference?
- How many event handlers is it reasonable to instantiate? 
- Does it make sense to always use =if= and =cond= logic?
- Are there any drawbacks to performing many actions in a =do= block?
- How well do we understand concurrency? Should we be using a =dosync=
  block?

** steps
consolidated steps:

:PROPERTIES:
:ID:       FC7DE6AF-7BCA-4E0F-B10C-19C7CD6E1B42
:END:
Is soundflower running? 
Is audacity running? 
How will you be connecting to a sc server--internally or externally? (Do you want to
be running a pscope?

Is your namespace confused? (Can be an issue, esp. when working with
babel blocks).

make sure MIDI controllers are connected and activated
[[id:2A392B91-CD13-41A8-ADA1-00891B6B072F][are you connected to a controller?]]

make sure buffers are loaded with sound files and play back:
[[id:19C65970-C333-4D09-AD7B-31C158D9C120][make sure buffer was loaded]]

create instrument for granular synth with goldberg:
[[id:F2B83957-0823-4B8B-A77A-4F7D8080B0B9][def an instrument for playing with parameters to TGrains]]

make sure pad and knob refs are defined
[[id:B3DB9C3B-4F2B-40D4-B16C-DF3047C968D9][define atoms for two sets of channels and CC messages]]


define functions for knob and pad usage:
[[id:C945047A-E0FD-439C-9354-6F8CA4989DAE][full knob and pad abstraction]]

start with a given set of event handlers
[[id:F51E8E40-9886-45B3-A06F-7C64DAD2FE7A][create event-handlers for general-tgrains]]


start up a granular synth instance
[[id:AD3B833A-363B-410D-A18E-348F8D7D4182][play goldberg with general-tgrains granular synth]]
[[id:44B87F5F-FCA4-4451-A91C-A2DCD2F9F714][play yancey]]

Play with controller and view values you are using
[[id:119605DE-9AD4-4818-B921-3E6B76396D6C][monitor current state of refs]]

add yancey versions on channel 2
[[id:23951DB5-0EEC-4CB4-B949-C728F4CF2A2D][define control-change knobs for goldberg and Channel 1]]
** improvements, expansions and refactorings desired
- make it easy to start up a variety of given projects with their
  related synths to be manipulated by a common set of controller abstractions

- streamline the process of developing and exploring new synth structures

  - translate more Supercollider Tour of UGens synths to overtone

- play back more than one sound file at a time

  - use Yancey and Goldberg

- use busses and various effects pipelines

- program additional functions for MIDI keys and remaining "five-way
  buttons" interface (Up-down left-right bang)
* understanding the mechanics of busses, synths, panning and groups
** mono defsynth out
#+BEGIN_SRC clojure 
  (defsynth test [freq 440 amp 0.1]
    (out 0 (* amp (sin-osc freq))))

  (test)
#+END_SRC

#+RESULTS:
: #<synth: test>#<synth-node[loading]: user/test 89>

#+BEGIN_SRC clojure
  (defsynth test-pan [freq 440 amp 0.1]
    (out 0 (pan2 (* amp (sin-osc freq)))))

  (test-pan)
#+END_SRC

#+RESULTS:
: #<synth: test-pan>#<synth-node[loading]: user/test-pan 90>


#+BEGIN_SRC clojure
  (defsynth test-pan2 [freq1 440 freq1-pan -0.5 freq2 443 freq2-pan 0.5 amp 0.1]
    (out 0 (pan2 (* amp (sin-osc freq1)) freq1-pan 0.5))
    (out 1 (pan2 (* amp (saw freq2)) freq2-pan 0.5))
    )

  (test-pan2)
#+END_SRC

#+RESULTS:
: #<synth: test-pan2>#<synth-node[loading]: user/test-pan2 94>

* Exploring Overtone examples directory
See all-examples.org
[[file:~/Github-repos/post-tonal-overtone/src/post_tonal_overtone/org_files/source-examples-in-org/all-examples.org][file:~/Github-repos/post-tonal-overtone/src/post_tonal_overtone/org_files/source-examples-in-org/all-examples.org]]
** "Space Organ" example
Taken from:
[[file:~/Github-repos/overtone-source/src/overtone/examples/workshops/resonate2013/ex05_synthesis.clj][file:~/Github-repos/overtone-source/src/overtone/examples/workshops/resonate2013/ex05_synthesis.clj]]

#+BEGIN_SRC clojure :results silent
;; change pitches of original
  (demo 60 (g-verb (sum (map #(blip (* (midicps (duty:kr % 0 (dseq [24 27 31 35 38] INF))) %2) (mul-add:kr (lf-noise1:kr 1/2) 3 4)) [1 1/2 1/4] [1 4 8])) 200 8))
#+END_SRC

#+BEGIN_SRC clojure
   ;; A more easy-on-the-eyes version would look like this:
   (demo 60
         (let [;; First create 3 frequency generators at different
               ;; tempos/rates [1 1/2 1/4]
               ;; Each generator will cycle (at its own pace) through the sequence of
               ;; notes given to dseq and convert notes into actual frequencies
               f (map #(midicps (duty:kr % 0 (dseq [24 27 31 36 41] INF)))
                      [1 1/2 1/4])
               ;; Next we transpose the frequencies over several octaves
               ;; and create a band limited impulse generator (blip) for
               ;; each of the freq gens. The blip allows us to configure the number
               ;; of overtones/harmonics used, which is constantly modulated by a
               ;; noise generator between 1 and 7 harmonics...
               tones (map #(blip (* % %2)
                                 (mul-add:kr (lf-noise1:kr 1/4) 3 4))
                          f [1 4 8])]
           ;; finally, all tones are summed into a single signal
           ;; and passed through a reverb with a large roomsize and decay time...
           (g-verb (sum tones) 200 8)))
   )
#+END_SRC

#+RESULTS:
: nil
** =Examples= function
*** function
#+BEGIN_SRC clojure :results output
(examples)
#+END_SRC

#+RESULTS:
#+begin_example
svf
  :state-filter    (:ar) - Create a state variable 
                           filter 

sound-in
  :mono-patch      (:ar) - World's most expensive 
                           patchcord 
  :stereo-patch    (:ar) - World's most expensive 
                           stereo patchcord 

impulse
  :poll            (:kr) - Poll an impulse to view 
                           its output 

send-reply
  :count           (:kr) - Send back an OSC 
                           message containing a 
                           rolling count 

amplitude
  :saw-vol         (:ar) - Use input amplitude to 
                           control saw amplitude 
  :sin-freq        (:ar) - Use input amplitude to 
                           control saw frequency 

dibrown
  :rand-walk       (:ar) - Random whole number 
                           walk through freqs with 
                           rate determined by 
                           mouse-x 

membrane-hexagon
  :mouse           (:kr) - Use mouse button, X and 
                           Y locations to play a 
                           drum. 

vosim
  :mouse1          (:ar) - Use mouse X location to 
                           control the frequency 
                           of the vosim. 
  :mouse2          (:ar) - Use the mouse X & Y 
                           location to modify some 
                           random vosim noises. 

membrane-circle
  :mouse           (:kr) - Use mouse button, X and 
                           Y locations to play a 
                           drum. 

dbrown
  :rand-walk       (:ar) - Random floating point 
                           number walk through 
                           freqs with rate 
                           determined by mouse-x 

dyn-klang
  :sin-osc         (:ar) - Use a sin-osc to change 
                           3 running sine 
                           oscillators 

dwhite
  :rand-seq        (:ar) - Play a random sequence 
                           of floats mapped to 
                           freqs with rate 
                           determined by mouse-x 

dyn-klank
  :mouse           (:ar) - Use mouse to change 3 
                           running frequency 
                           resonators 

compander
  :noise-gate      (:ar) - Use compander to create 
                           a noise gate 
  :data            (:ar) - View data coming out of 
                           a compander 

diwhite
  :rand-seq        (:ar) - Play a random sequence 
                           of integers mapped to 
                           freqs with rate 
                           determined by mouse-x 

b-moog
  :compare-filters (:ar) - Compare low, high, and 
                           bandpass 

iir-filter
  :low-pass        (:ar) - Create a low pass 
                           filter 

#+end_example
*** org-mode list
**** svf
  :state-filter    (:ar) - Create a state variable 
                           filter 
**** sound-in
  :mono-patch      (:ar) - World's most expensive 
                           patchcord 
  :stereo-patch    (:ar) - World's most expensive 
                           stereo patchcord 
**** impulse
  :poll            (:kr) - Poll an impulse to view 
                           its output 
**** send-reply
  :count           (:kr) - Send back an OSC 
                           message containing a 
                           rolling count 
**** amplitude
  :saw-vol         (:ar) - Use input amplitude to 
                           control saw amplitude 
  :sin-freq        (:ar) - Use input amplitude to 
                           control saw frequency 
**** dibrown
  :rand-walk       (:ar) - Random whole number 
                           walk through freqs with 
                           rate determined by 
                           mouse-x 
**** membrane-hexagon
  :mouse           (:kr) - Use mouse button, X and 
                           Y locations to play a 
                           drum. 
**** vosim
  :mouse1          (:ar) - Use mouse X location to 
                           control the frequency 
                           of the vosim. 
  :mouse2          (:ar) - Use the mouse X & Y 
                           location to modify some 
                           random vosim noises. 
**** membrane-circle
  :mouse           (:kr) - Use mouse button, X and 
                           Y locations to play a 
                           drum. 
**** dbrown
  :rand-walk       (:ar) - Random floating point 
                           number walk through 
                           freqs with rate 
                           determined by mouse-x 
**** dyn-klang
  :sin-osc         (:ar) - Use a sin-osc to change 
                           3 running sine 
                           oscillators 
**** dwhite
  :rand-seq        (:ar) - Play a random sequence 
                           of floats mapped to 
                           freqs with rate 
                           determined by mouse-x 
**** dyn-klank
  :mouse           (:ar) - Use mouse to change 3 
                           running frequency 
                           resonators 
**** compander
  :noise-gate      (:ar) - Use compander to create 
                           a noise gate 
  :data            (:ar) - View data coming out of 
                           a compander 
**** diwhite
  :rand-seq        (:ar) - Play a random sequence 
                           of integers mapped to 
                           freqs with rate 
                           determined by mouse-x 
**** b-moog
  :compare-filters (:ar) - Compare low, high, and 
                           bandpass 
**** iir-filter
  :low-pass        (:ar) - Create a low pass 
                           filter 

#+end_example

* Use Macros to wrap over commonly used overtone idioms
** simple example over =demo=
Note that this works, but if we try to pass a "duration" argument to
=demo=...
#+BEGIN_SRC clojure
(defn test
  [freq]
  (demo (sin-osc freq)))
#+END_SRC

#+RESULTS:
: #'overtone.examples.buses.getonthebus/test

...Clojure complains:

#+BEGIN_SRC clojure
(defn test1
  [dur]
  (demo dur (sin-osc)))
#+END_SRC

#+RESULTS:

However, using a macro...

#+BEGIN_SRC clojure
(defmacro my-demo
  [dur]
  `(demo ~dur (sin-osc)))
#+END_SRC

#+RESULTS:
: #'overtone.examples.buses.getonthebus/my-demo

#+BEGIN_SRC clojure
(my-demo 0.1)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.exam736/audition-synth 212>
** pass in ugens to demo
:PROPERTIES:
:ID:       EB78186B-636E-40F4-A2B3-E38FC312DD3F
:END:

#+BEGIN_SRC clojure
(defmacro my-ugen-demo
  [dur ugen]
  `(demo ~dur (~ugen)))
#+END_SRC

#+RESULTS:
: #'user/my-ugen-demo

See examples of usage below

* basic Overtone ugens and examples
** the four waveforms (a la Nonesuch Guide to Electronic Music)
Uses my-ugen-demo as defined above:
[[id:EB78186B-636E-40F4-A2B3-E38FC312DD3F][pass in ugens to demo]]

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 sin-osc)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 saw)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 lf-tri)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 pulse)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (pulse 440 0.1))
#+END_SRC

#+BEGIN_SRC clojure
(demo 4 (pulse 440 0.9))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 277>

#+BEGIN_SRC clojure :results silent
(demo 4 (pulse 440 0.5))

;; square being a special case of pulse/rectangular
(my-ugen-demo 5 square)
#+END_SRC





#+BEGIN_SRC clojure :results silent
(my-ugen-demo 0.1 blip)
#+END_SRC
** pass interesting frequencies to examples
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (sin-osc:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 990 (* 400 (pink-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (brown-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise0 10)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise1 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise2 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-brown-noise0 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-clip-noise 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (sin-osc (+ 350 (* (* 100 (lf-brown-noise0:kr 5)) (lf-clip-noise 4)))))
#+END_SRC

** figure out how to pass interesting frequencies to examples
*** use simple waveforms
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (sin-osc:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-saw:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-pulse:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-tri:kr 1) 100))))
#+END_SRC

*** use randomness
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ (weighted-choose [10 400] [0.1 0.9])  (* (weighted-choose [10 400] [0.1 0.9]) (pink-noise)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (let [hz  (choose (take 5 (reverse (map #(* % 100) (range 10)))))]
    (demo 2 (sin-osc (+ hz (* 400 (pink-noise))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (brown-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise0 10)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise1 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise2 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-brown-noise0 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-clip-noise 10)))))
#+END_SRC

#+BEGIN_SRC clojure
(demo 4 (sin-osc (+ 350 (* (* 100 (lf-brown-noise0:kr 5)) (lf-clip-noise 4)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (sin-osc (* 0.5 (+ (* 900 (lf-brown-noise0:kr 20)) (* (* 100 (lf-brown-noise0:kr 1)) (lf-clip-noise 2))))))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 338>


#+RESULTS:
: #<synth-node[loading]: user/audition-synth 338>

* using multichannel expansions and mix and 
** use 'repeatedly' to approximate sclang expansions
#+BEGIN_SRC clojure :results silent
(demo (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (mix [(sin-osc 220) (sin-osc 420)]))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(dotimes [n 2] (demo (sin-osc (+ 200 (rand-int 999)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(dotimes [n 2] (demo (sin-osc (+ 200 (rand-int 999)))))
#+END_SRC

#+BEGIN_SRC clojure
  (definst clang [note 60 amp 0.3]
    (let [freq (midicps note)]
      (* amp
         (mix (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))
         (env-gen (lin 0.01 1 1 1) 1 1 0 1 FREE))))
#+END_SRC

#+RESULTS:
: nil#<instrument: clang>

#+BEGIN_SRC clojure :results silent
(clang)
#+END_SRC


#+BEGIN_SRC clojure
  (defsynth clang1 []
      (out 0 (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC

#+RESULTS:
: nil#<synth: clang1>

#+BEGIN_SRC clojure :results silent
(clang1)
#+END_SRC

** develop macro and event handler to for random synth player
#+BEGIN_SRC clojure
(defmacro play-rand []
`(demo 0.4 (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC

#+RESULTS:
: #'user/play-rand

#+BEGIN_SRC clojure :results silent
(play-rand)
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand2 [amp]
`(demo 0.4       (* ~amp
         (mix (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))
         (env-gen (lin 0.01 1 1 1) 1 1 0 1 FREE))))
#+END_SRC

#+RESULTS:
: #'user/play-rand2

#+BEGIN_SRC clojure
(play-rand2 0.1)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC clojure :results silent
(demo 10 (* (env-gen (lin 0 1 1 1 1) 1 1 0 1 FREE) (repeatedly 5 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand2 []
`(demo 10 (* (env-gen (lin 0 1 1 1 1) 1 1 0 1 FREE) (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC
#+RESULTS:
: #'user/play-rand2

#+BEGIN_SRC clojure :results silent
(play-rand2)
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand3 [dur]
`(demo ~dur (repeatedly 5 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC
#+RESULTS:
: #'user/play-rand3

#+BEGIN_SRC clojure
(play-rand3 0.1)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 38>

** play-rand4 and event handlers
#+BEGIN_SRC clojure
(defmacro play-rand4 [dur hz]
`(demo ~dur (repeatedly 5 #(sin-osc (+ ~hz (rand-int 999))))))
#+END_SRC

#+RESULTS:
: #'user/play-rand4

#+BEGIN_SRC clojure
(play-rand4 0.2 300)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 53>

#+BEGIN_SRC clojure
(on-event [:midi :note-on]
(fn [e] (play-rand4 0.2 300))
::rand-handler)
#+END_SRC

#+RESULTS:
: :added-async-handler

#+BEGIN_SRC clojure
(remove-event-handler ::rand-handler)
#+END_SRC

#+RESULTS:
: :handler-removed

** use math numeric-tower for dedicated midicps
#+BEGIN_SRC clojure
;; have to include the following library as a dependency
(require '[clojure.math.numeric-tower :as math])

(defn my-midihz [d] (* (math/expt 2 (/ (- d 69) 12)) 440))


#+END_SRC

** various attempts to pass amplitude arguments through a macro
#+BEGIN_SRC clojure :results silent
(defmacro play-rand5 [dur note]
`(demo ~dur (repeatedly 5 #(* 0.01 (sin-osc (+ (my-midihz ~note) (rand-int 999)))))))

#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (fn [e] 
              (let [note (:note e)
                    vel (:velocity e)] 
                    (play-rand5 0.2 note (* 0.1 vel))))
::rand-handler2)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::rand-handler2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (fn [e] 
              (let [note (:note e)
                    vel (:velocity e)] 
                    (println note (* 0.01 vel))))
::debug-rand-handler2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::debug-rand-handler2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (defmacro play-rand6 [dur note]
  `(demo ~dur (repeatedly 5 #(* (env-gen (perc 0.01 0.2 0.8) 1 1 0 1 :action FREE)
                                (sin-osc (+ (my-midihz ~note) (rand-int 999)))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (fn [e] 
              (let [note (:note e)
                    vel (:velocity e)] 
                    (play-rand6 0.2 note (* 0.01 vel))))
::rand-handler2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(defmacro play-rand7 [dur note]
`(demo ~dur (sin-osc (vec (repeatedly 100 #(+ 200 (my-midihz ~note) (rand-int 999)))))))
#+END_SRC


#+BEGIN_SRC clojure
(play-rand7 0.8 60)
#+END_SRC

!!!
: #<synth-node[loading]: user/audition-synth 666>


#+RESULTS:


* scaling 0-127 MIDI notes

** first (with 'run' and 'poll')
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (fn [e]
              (let [note (:note e)]
                (run 0.1 (poll:kr (impulse:kr 5) (lin-lin note 48 79 1.0 100.0)))))
            ::scaler)
#+END_SRC

** second (use different scaling for different channels)
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (fn [{note :note chan :channel} ]
              (case chan
                0 (run 0.1 (poll:kr (impulse:kr 5) (lin-lin note 48 79 0.01 0.1)))
                1 (run 0.1 (poll:kr (impulse:kr 5) (lin-lin note 48 79 1.0 100.0)))
                2 (run 0.1 (poll:kr (impulse:kr 5) (lin-lin note 48 79 0 1)))
                3 (run 0.1 (poll:kr (impulse:kr 5) (lin-lin note 48 79 1 1000)))
                ))
            ::scaler2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::scaler)
(remove-event-handler ::scaler2)
#+END_SRC

* persisting overtone values
** conj 
#+BEGIN_SRC clojure :results silent
(def liked-values (atom []))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(deref liked-values)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def current-val (atom 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(deref current-val)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(swap! liked-values conj (deref current-val))
#+END_SRC

#+BEGIN_SRC clojure :results silent
;; hard codes in ref for "liked-values"
  (defn record-val [place]
    (swap! liked-values conj (deref place)))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(record-val current-val)
#+END_SRC

** note, event-handler uses functions defined in workjournal
[[id:1F1A5066-7662-40A0-98DF-3FF317EBCE41][{2017-01-05 Thu 17:12} "map range" or "lin-lin"]]
#+BEGIN_SRC clojure :results silent
    (on-event [:midi :note-on]
              (fn [{note :note}]
                (do (reset! current-val (maprange [60 91] [0.0 100] note))
                    (println (round2 (deref current-val) 2))))
  ::set-current-val)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::set-current-val)
#+END_SRC

#+BEGIN_SRC clojure :results output
(println (round2 (deref current-val) 2))
#+END_SRC

#+RESULTS:
: 52.76

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity}]
(case vel
127
              (case cc-channel 
                18 (record-val current-val)
                17 (println (deref liked-values))
                :else nil)
0 nil))
            ::record-value-handler)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::record-value-handler)
#+END_SRC

** change range on a maprange dynamically
#+BEGIN_SRC clojure :results silent
(def dst-hi (atom 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(maprange [60 91] [0.0 @dst-hi] 70)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{note :note val :velocity}]
              (cond (= note 2) (do (reset! dst-hi val)
                                   (println @dst-hi))))
              ::test-range-high)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::test-range-high)
#+END_SRC

** some refs
#+BEGIN_SRC clojure :results silent
(def trate-ref (atom 1))
#+END_SRC

#+BEGIN_SRC clojure
(def durnumerator-ref (atom 8))
#+END_SRC
