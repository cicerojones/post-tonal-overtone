* divisions and subdivisions

#+BEGIN_SRC clojure
(repeat 4 1)
#+END_SRC

#+RESULTS:
| 1 | 1 | 1 | 1 |

#+BEGIN_SRC clojure
(for [n (range 4 -1 -1)]
  (repeat n n))
#+END_SRC

#+RESULTS:
| 4 | 4 | 4 | 4 |
| 3 | 3 | 3 |   |
| 2 | 2 |   |   |
| 1 |   |   |   |


| 1 |   4 |
| 2 |   2 |
| 3 | 4/3 |
| 4 |   1 |

(= 4 (* 3 n)

| 1 |   64 |
| 2 |   32 |
| 3 | 64/3 |
| 4 |   16 |
| 5 |      |

* lists of primary formal constituents

** weird collection of events

*** selections as durations
#+BEGIN_SRC clojure
(let [durations-possibilities [1 2]
      dur-vec (iterate #(rand-nth durations-possibilities)]
#+END_SRC


#+BEGIN_SRC clojure
(cmb/selections [1 2] 4)
#+END_SRC

#+RESULTS:
| 1 | 1 | 1 | 1 |
| 1 | 1 | 1 | 2 |
| 1 | 1 | 2 | 1 |
| 1 | 1 | 2 | 2 |
| 1 | 2 | 1 | 1 |
| 1 | 2 | 1 | 2 |
| 1 | 2 | 2 | 1 |
| 1 | 2 | 2 | 2 |
| 2 | 1 | 1 | 1 |
| 2 | 1 | 1 | 2 |
| 2 | 1 | 2 | 1 |
| 2 | 1 | 2 | 2 |
| 2 | 2 | 1 | 1 |
| 2 | 2 | 1 | 2 |
| 2 | 2 | 2 | 1 |
| 2 | 2 | 2 | 2 |

*** midi event map
#+BEGIN_SRC clojure
(let [durations (cmb/selections [1 2] 4)
times (reductions + 0 (flatten (cmb/selections [1 2] 4)))
pitches (repeat (count times) 0)]
(map (fn [t p] {:time t :pitch p}) times pitches))
#+END_SRC

#+RESULTS:
| :time |  0 | :pitch | 0 |
| :time |  1 | :pitch | 0 |
| :time |  2 | :pitch | 0 |
| :time |  3 | :pitch | 0 |
| :time |  4 | :pitch | 0 |
| :time |  5 | :pitch | 0 |
| :time |  6 | :pitch | 0 |
| :time |  7 | :pitch | 0 |
| :time |  9 | :pitch | 0 |
| :time | 10 | :pitch | 0 |
| :time | 11 | :pitch | 0 |
| :time | 13 | :pitch | 0 |
| :time | 14 | :pitch | 0 |
| :time | 15 | :pitch | 0 |
| :time | 16 | :pitch | 0 |
| :time | 18 | :pitch | 0 |
| :time | 20 | :pitch | 0 |
| :time | 21 | :pitch | 0 |
| :time | 23 | :pitch | 0 |
| :time | 24 | :pitch | 0 |
| :time | 25 | :pitch | 0 |
| :time | 26 | :pitch | 0 |
| :time | 28 | :pitch | 0 |
| :time | 29 | :pitch | 0 |
| :time | 31 | :pitch | 0 |
| :time | 32 | :pitch | 0 |
| :time | 34 | :pitch | 0 |
| :time | 36 | :pitch | 0 |
| :time | 37 | :pitch | 0 |
| :time | 38 | :pitch | 0 |
| :time | 40 | :pitch | 0 |
| :time | 42 | :pitch | 0 |
| :time | 44 | :pitch | 0 |
| :time | 46 | :pitch | 0 |
| :time | 47 | :pitch | 0 |
| :time | 48 | :pitch | 0 |
| :time | 49 | :pitch | 0 |
| :time | 51 | :pitch | 0 |
| :time | 52 | :pitch | 0 |
| :time | 53 | :pitch | 0 |
| :time | 55 | :pitch | 0 |
| :time | 57 | :pitch | 0 |
| :time | 58 | :pitch | 0 |
| :time | 60 | :pitch | 0 |
| :time | 61 | :pitch | 0 |
| :time | 63 | :pitch | 0 |
| :time | 64 | :pitch | 0 |
| :time | 66 | :pitch | 0 |
| :time | 68 | :pitch | 0 |
| :time | 70 | :pitch | 0 |
| :time | 72 | :pitch | 0 |
| :time | 73 | :pitch | 0 |
| :time | 74 | :pitch | 0 |
| :time | 76 | :pitch | 0 |
| :time | 78 | :pitch | 0 |
| :time | 79 | :pitch | 0 |
| :time | 81 | :pitch | 0 |
| :time | 83 | :pitch | 0 |
| :time | 85 | :pitch | 0 |
| :time | 87 | :pitch | 0 |
| :time | 88 | :pitch | 0 |
| :time | 90 | :pitch | 0 |
| :time | 92 | :pitch | 0 |
| :time | 94 | :pitch | 0 |
| :time | 96 | :pitch | 0 |


#+BEGIN_SRC clojure
(reductions + 0 (repeat 3 1))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 | 3 |

#+BEGIN_SRC clojure
(def event-list1 (let [durations (cmb/selections [1 2] 4)
times (reductions + 0 (flatten (cmb/selections [1 2] 4)))
pitches (repeat (count times) 0)]
(map (fn [t p] {:time t :pitch p}) times pitches)))
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/event-list

#+BEGIN_SRC clojure
(count event-list1)
#+END_SRC

#+RESULTS:
: 65

*** mapping an update-in
#+BEGIN_SRC clojure
(defn where [k f ev-list]
 (map #(update-in % [k] f) ev-list))
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/where

#+BEGIN_SRC clojure
(def m {:time 0 :pitch 0})
(update-in m [:time] inc)
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/m{:time 1, :pitch 0}

#+BEGIN_SRC clojure
(defn bpm [beats] (fn [beat] (/ (* beat 60 1000) beats)))
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/bpm

#+BEGIN_SRC clojure
(partial + 10)
#+END_SRC

#+RESULTS:
: #<core$partial$fn__4228 clojure.core$partial$fn__4228@616e3c0b>

#+BEGIN_SRC clojure
((partial + 10) 10)
#+END_SRC

#+RESULTS:
: 20

#+BEGIN_SRC clojure
(defn from [n] (partial + n))
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/from

#+BEGIN_SRC clojure
(->> event-list
     (where :time (comp (from (now)) (bpm 90))))
#+END_SRC

UNDERSTANDING THREAD LAST!!

#+BEGIN_SRC clojure
(where :time (comp (from (now)) (bpm 90)) event-list) 
#+END_SRC

#+RESULTS:
| :time | 1429741821225   | :pitch | 0 |
| :time | 4289225465675/3 | :pitch | 0 |
| :time | 4289225467675/3 | :pitch | 0 |
| :time | 1429741823225   | :pitch | 0 |
| :time | 4289225471675/3 | :pitch | 0 |
| :time | 4289225473675/3 | :pitch | 0 |
| :time | 1429741825225   | :pitch | 0 |
| :time | 4289225477675/3 | :pitch | 0 |
| :time | 1429741827225   | :pitch | 0 |
| :time | 4289225483675/3 | :pitch | 0 |
| :time | 4289225485675/3 | :pitch | 0 |
| :time | 4289225489675/3 | :pitch | 0 |
| :time | 4289225491675/3 | :pitch | 0 |
| :time | 1429741831225   | :pitch | 0 |
| :time | 4289225495675/3 | :pitch | 0 |
| :time | 1429741833225   | :pitch | 0 |
| :time | 4289225503675/3 | :pitch | 0 |
| :time | 1429741835225   | :pitch | 0 |
| :time | 4289225509675/3 | :pitch | 0 |
| :time | 1429741837225   | :pitch | 0 |
| :time | 4289225513675/3 | :pitch | 0 |
| :time | 4289225515675/3 | :pitch | 0 |
| :time | 4289225519675/3 | :pitch | 0 |
| :time | 4289225521675/3 | :pitch | 0 |
| :time | 4289225525675/3 | :pitch | 0 |
| :time | 4289225527675/3 | :pitch | 0 |
| :time | 4289225531675/3 | :pitch | 0 |
| :time | 1429741845225   | :pitch | 0 |
| :time | 4289225537675/3 | :pitch | 0 |
| :time | 4289225539675/3 | :pitch | 0 |
| :time | 4289225543675/3 | :pitch | 0 |
| :time | 1429741849225   | :pitch | 0 |
| :time | 4289225551675/3 | :pitch | 0 |
| :time | 4289225555675/3 | :pitch | 0 |
| :time | 4289225557675/3 | :pitch | 0 |
| :time | 1429741853225   | :pitch | 0 |
| :time | 4289225561675/3 | :pitch | 0 |
| :time | 1429741855225   | :pitch | 0 |
| :time | 4289225567675/3 | :pitch | 0 |
| :time | 4289225569675/3 | :pitch | 0 |
| :time | 4289225573675/3 | :pitch | 0 |
| :time | 1429741859225   | :pitch | 0 |
| :time | 4289225579675/3 | :pitch | 0 |
| :time | 1429741861225   | :pitch | 0 |
| :time | 4289225585675/3 | :pitch | 0 |
| :time | 1429741863225   | :pitch | 0 |
| :time | 4289225591675/3 | :pitch | 0 |
| :time | 1429741865225   | :pitch | 0 |
| :time | 4289225599675/3 | :pitch | 0 |
| :time | 4289225603675/3 | :pitch | 0 |
| :time | 1429741869225   | :pitch | 0 |
| :time | 4289225609675/3 | :pitch | 0 |
| :time | 4289225611675/3 | :pitch | 0 |
| :time | 4289225615675/3 | :pitch | 0 |
| :time | 1429741873225   | :pitch | 0 |
| :time | 4289225621675/3 | :pitch | 0 |
| :time | 1429741875225   | :pitch | 0 |
| :time | 4289225629675/3 | :pitch | 0 |
| :time | 4289225633675/3 | :pitch | 0 |
| :time | 1429741879225   | :pitch | 0 |
| :time | 4289225639675/3 | :pitch | 0 |
| :time | 1429741881225   | :pitch | 0 |
| :time | 4289225647675/3 | :pitch | 0 |
| :time | 4289225651675/3 | :pitch | 0 |
| :time | 1429741885225   | :pitch | 0 |

#+BEGIN_SRC clojure :results output
(let [den (now)
      dis (+ 1000 den)]
  (do (prn den)
      (prn dis)))
#+END_SRC

#+RESULTS:
: 1429742420877
: 1429742421877

#+BEGIN_SRC clojure
(defn my-ctford-play [notes] (doseq [{ms :time midi :pitch} notes] (at ms (sampled-piano (+ midi 60)))))
#+END_SRC

#+RESULTS:
: #'post_tonal_overtone.core/my-ctford-play

#+BEGIN_SRC clojure
(->> event-list (where :time (comp (from (now)) (bpm 320))) my-ctford-play)
#+END_SRC

#+RESULTS:
: nil

