* 
* Building up more sophisticated Controller abstractions
:PROPERTIES:
:ID:       62D39834-5A93-49BB-80CD-6475FD7C1D6D
:END:
** stop all sound
#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil

** Abstraction for using CC messages while exploring UGens and documentation
*** can you remember how to make an event handler to modify two parameters?
Here's you "synth:"

#+BEGIN_SRC clojure :results silent
(definst an-fnoise [vol 0.1 ffreq 1000]
  (lpf (* (pink-noise)
          vol)
       ffreq))

#+END_SRC

#+BEGIN_SRC clojure :results silent
(an-fnoise 0.7)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(on-event [:midi :control-change]
          (fn [{cc-channel :note vel :velocity}]
            (cond (= cc-channel 1) (ctl an-fnoise :vol (scale-range vel 1 127 0 1))
                  (= cc-channel 2) (ctl an-fnoise :ffreq (scale-range vel 1 127 200 8000))))
          ::pooper)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::pooper)
#+END_SRC
*** Putatative "expanded" version of an-fnoise with CC control
**** code in process

#+BEGIN_SRC clojure :results silent
(definst someother-fnoise [vol 0.1 ffreq 1000]
  (lpf (* (pink-noise)
          vol)
       ffreq))

(someother-fnoise 0.7)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(someother-fnoise :vol 0.6)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl someother-fnoise :ffreq 500)
#+END_SRC

Use atoms for "hot-swapping" values??!!

#+BEGIN_SRC clojure :results silent
  (def ffl (atom 200))
  (def ffh (atom 8000))

#+END_SRC

#+BEGIN_SRC clojure :results silent

  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity}]
              (cond (= cc-channel 1) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                    (= cc-channel 2) (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh))
                    (= cc-channel 3) (reset! ffl (* vel 100))
                    (= cc-channel 4) (reset! ffh (* vel 100))
                    ))
            ::someother-pooper)

#+END_SRC

#+BEGIN_SRC clojure :results silent

    (on-event [:midi :control-change]
              (fn [{cc-channel :note vel :velocity}]
                (cond (= cc-channel 1) (do (reset! ffl (/ vel 127 )) 
                                           (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1)))
                      (= cc-channel 2) (do (reset! ffh (* vel 10))
                                           (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh)))
                      ))
              ::someother-pooper-do)

#+END_SRC


#+BEGIN_SRC clojure
(list @ffl @ffh)
#+END_SRC

#+RESULTS:
| 113/127 | 1500 |

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::someother-pooper)
#+END_SRC

#+BEGIN_SRC clojure :results silent
;;; Note this presents problems; why?
(on-event [:midi :control-change]
          (fn [{cc-channel :note vel :velocity}]
            (cond (= cc-channel 1) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 2) (ctl someother-fnoise :ffreq (scale-range vel 1 127 200 8000))
                  (= cc-channel 3) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 4) (ctl someother-fnoise :ffreq (scale-range vel 1 127 (* 200))
                  (= cc-channel 5) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 6) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 7) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 8) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 40) (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1))
                  (= cc-channel 41) (ctl someother-fnoise :ffreq   (scale-range vel 1 127 100 1000))
                  ))
          ::someother-pooper)

#+END_SRC
**** explanation of what's going on in the above code

So, what does this have? 

- =on-event= as function has 1.arguments, 2. a body that is a function, and
  1. name (with double colon)

- the cond in the function body is necessary to direct the messages to
  the proper cc-channel

- the velocity reported for each channel is used with a =ctl= message,
  making some modification of an existing, "playing" synth on the
  server?



the value being passed to the relevant argument of the synth (in this
case, the synth is someother-fnoise, and the argument is either 'vol' or
'ffreq') is the result of being scaled by the "scale-range" function.

We need this function to always take three determined arguments: 

1. the input value (in all these CC cases, this is "vel" or the reported
velocity of the given knob), 

2. the input min and max, which as MIDI messages is constrained to
   1-127

3. an output min and max.

We want to be able to manipulate these on the fly. Let's use another
button to report back a channel and a "velocity"
** reusable atoms of CC values
#+BEGIN_SRC clojure :results silent
  (def cc1 (atom 0))
  (def cc2 (atom 0))
  (def cc3 (atom 0))
  (def cc4 (atom 0))
  (def cc5 (atom 0))
  (def cc6 (atom 0))
  (def cc7 (atom 0))
  (def cc8 (atom 0))

  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity}]
              (cond (= cc-channel 1) (reset! cc1 val)
                    (= cc-channel 2) (reset! cc2 val)
                    (= cc-channel 3) (reset! cc3 val)
                    (= cc-channel 4) (reset! cc4 val)
                    (= cc-channel 5) (reset! cc5 val)
                    (= cc-channel 6) (reset! cc6 val)
                    (= cc-channel 7) (reset! cc7 val)
                    (= cc-channel 8) (reset! cc8 val)
))
::cc-state)
                  
                  
#+END_SRC

#+BEGIN_SRC clojure :results silent
(list @cc1 @cc2 @cc3 @cc4 @cc5 @cc6 @cc7 @cc8)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-state)
#+END_SRC
** receive and respond to channel change messages
Print out

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity chan :channel}]
              (println (list cc-channel vel chan)))
              ::list-all)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::list-all)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
            (if (= chan 1) (println chan) (println chan))
             )
::cc-state-if)
#+END_SRC
** print out CC knob, value and channel for all CC-change messages
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
              (println (list cc-channel val chan)))
              ::list-all)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::list-all)
#+END_SRC

* Exploring UGens

** scoping (need to understand bus vs. buffer)

[[file:~/Github-repos/overtone-source/src/overtone/examples/buses/getonthebus.clj][file:~/Github-repos/overtone-source/src/overtone/examples/buses/getonthebus.clj]]

#+BEGIN_SRC clojure
(defn scope
  "Create a scope for either a bus or a buffer. Defaults to scoping audio-bus 0.
   Example use:

   (scope a-control-bus)
   (scope a-buffer)
   (scope an-audio-bus)
   (scope :audio-bus 1)
   (scope :control-bus 10)
   (scope :buf 10)"
  ([]        (scope :audio-bus 0))
  ([thing]   (cond
              (audio-bus? thing)   (scope :audio-bus thing)
              (control-bus? thing) (scope :control-bus thing)
              (buffer? thing)      (scope :buf thing)
              :else                (scope :audio-bus thing)))
  ([kind id] (scope kind id false))
  ([kind id keep-on-top?]
     (ensure-internal-server!)
     (let [s  (mk-scope id kind keep-on-top? WIDTH HEIGHT)]
       (dosync (alter scopes* assoc (:id s) s))
       (scopes-start))))
#+END_SRC
** where do you find your UGens, brah?
[[id:CF18101A-0997-454B-875B-206651F0FF17][Overtone Cheat Sheet 0.9.1]]

Oh, of course. Maybe a better question is how to do you systematically
explore UGens, finding interesting and useful things?

First it will help to understand some basic parts of your building
blocks, such as triggering things and reading out values that various
UGens are producing. See polling and running
** Polling and running 
#+BEGIN_SRC clojure 
(run (poll:kr (impulse:kr 10) (abs  (* 1000 (pink-noise:kr))) "polled-val:"))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 112>

#+BEGIN_SRC clojure :results silent
(run (poll:kr (impulse:kr 10) (* 1000 (sin-osc:kr)) "polled-val:"))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(run 20 (poll:kr (impulse:kr 5) (line:kr 0.0 10.0 20)) "polled-val:"))
#+END_SRC

** give oscillators UGens arguments meaningful in Hz (i.e. be aware of 'mul' and 'add')
#+BEGIN_SRC clojure
(demo 10 (sin-osc (abs  (* 10000 (brown-noise:kr)))))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 59>

#+BEGIN_SRC clojure
(demo 10 (sin-osc (abs  (+ 300 (* 1000 (pink-noise:kr))))))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 60>
** read existing SC docs and tutorials and consider patterns
Compare with ugens-tour.org in

[[file:~/Dropbox/AB-local/Documents-new-home/supercollider-files/sc-misc/][file:~/Dropbox/AB-local/Documents-new-home/supercollider-files/sc-misc/]]

[[id:03FDC781-8605-442B-AF5C-1AA04BAF2306][title:: Tour of UGens]]
** develop demo-ing macro (or something) for improved UGen exploring

* Mastering Granular Synthesis
** t-grains documentation
#+BEGIN_SRC clojure 
overtone.core/t-grains
([num-channels trigger bufnum rate center-pos dur pan amp interp])
  
  [num-channels 2, trigger 0, bufnum 0, rate 1, center-pos 0, dur 0.1, pan 0.0, amp 0.1, interp 4]

  num-channels - Number of output channels 
  trigger      - At each trigger, the following 
                 arguments are sampled and used as 
                 the arguments of a new grain. A 
                 trigger occurs when a signal 
                 changes from <= 0 to > 0. If the 
                 trigger is audio rate then the 
                 grains will start with sample 
                 accuracy. 
  bufnum       - The index of the buffer to use. 
                 It must be a one channel (mono) 
                 buffer. 
  rate         - 1.0 is normal, 2.0 is one octave 
                 up, 0.5 is one octave down -1.0 
                 is backwards normal rate. Unlike 
                 PlayBuf, the rate is multiplied 
                 by BufRate, so you needn't do 
                 that yourself. 
  center-pos   - The position in the buffer in 
                 seconds at which the grain 
                 envelope will reach maximum 
                 amplitude. 
  dur          - Duration of the grain in seconds 
  pan          - A value from -1 to 1. Determines 
                 where to pan the output in the 
                 same manner as PanAz. 
  amp          - Amplitude of the grain. 
  interp       - 1,2,or 4. Determines whether the 
                 grain uses (1) no interpolation, 
                 (2) linear interpolation, or (4) 
                 cubic interpolation. 

  Sample playback from a buffer with fine control for doing 
  granular synthesis. Triggers generate grains from a single 
  channel (mono) buffer. Each grain has a Hann envelope 
  (sin^2(x) for x from 0 to pi) and is panned between two 
  channels of multiple outputs. 
#+END_SRC
** SLOW-GRAIN-REVERB: dedicated instrument abstraction for t-grains synths
:PROPERTIES:
:ID:       F109AE32-4289-4A8B-8637-B68D7B4FA5B6
:END:

#+BEGIN_SRC clojure :results silent
;; defaults to buffer 0 (slow-goldberg, in this project)
  ;; #<buffer-info: 184.540590s mono 0>

  (definst slow-grain-reverb [b 0 trigger-rate 1 centerpos 1 grain-dur 0.5] 
(let [trigger-rate (impulse:ar trigger-rate)]
    (free-verb
           (t-grains:ar 1 ;; num-channel
                        trigger-rate
                        b ;; bufnum
                        1 ;; rate
                        centerpos
                        grain-dur
                        0 ;; pan
                        1 ;; amp
                        2 ;; interp
                        )
           :mix 0.2
           :damp 0.1
           :room 0.9)))

      (slow-grain-reverb)

#+END_SRC
** misc. manipulations with slow-grain-reverb
#+BEGIN_SRC clojure
(ctl slow-grain-reverb :trigger-rate 0.5 :centerpos 4 :grain-dur 1)
#+END_SRC

#+RESULTS:
: #overtone.studio.inst.Inst{:name "slow-grain-reverb", :params ({:name "b", :default 0.0, :rate :kr, :value #atom[0.0 0x67ef0a06]} {:name "trigger-rate", :default 1.0, :rate :kr, :value #atom[1.0 0x38a4d81d]} {:name "centerpos", :default 1.0, :rate :kr, :value #atom[1.0 0x60e21590]} {:name "grain-dur", :default 0.5, :rate :kr, :value #atom[0.5 0x1702c902]}), :args ("b" "trigger-rate" "centerpos" "grain-dur"), :sdef {:name "user/slow-grain-reverb", :constants [0.0 2.0 1.0 17.0 0.9 0.2 0.1], :params (0.0 1.0 1.0 0.5), :pnames ({:name "b", :index 0} {:name "trigger-rate", :index 1} {:name "centerpos", :index 2} {:name "grain-dur", :index 3}), :ugens ({:args nil, :special 0, :name "Control", :rate 1, :inputs (), :rate-name :kr, :n-outputs 4, :id 306, :outputs ({:rate 1} {:rate 1} {:rate 1} {:rate 1}), :n-inputs 0} #<sc-ugen: impulse:ar [1]> #<sc-ugen: t-grains:ar [5]> #<sc-ugen: free-verb:ar [6]> #<sc-ugen: out:ar [7]>)}, :group #<synth-group[live]: Inst slow-grain-reverb Container 40>, :instance-group #<synth-group[live]: Inst slow-grain-reverb 41>, :fx-group #<synth-group[live]: Inst slow-grain-reverb FX 42>, :mixer #<synth-node[live]: overtone.stu547/mono-inst-mixer 43>, :bus #<audio-bus: No Name, mono, id 17>, :fx-chain [], :volume #atom[1.0 0x16d81be7], :pan #atom[0.0 0x6666c239], :n-chans 1}

#+BEGIN_SRC clojure :results silent
(ctl slow-grain-reverb :trigger-rate 0.3 :centerpos (tenth-inc 0.4) :grain-dur 2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def nome (metronome 60))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl slow-grain-reverb :trigger-rate 0.3 :centerpos (* (nome) 0.5) :grain-dur 2)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(slow-grain-reverb)
#+END_SRC
** general-tgrains as a synth
#+BEGIN_SRC clojure
  (defsynth general-tgrains-synth
    "my main granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:ar trate)
          centerpos centerpos]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC
** general-tgrains with t-randomness
#+BEGIN_SRC clojure
  (defsynth general-trand-synth
    "stochastic granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:kr trate)
          centerpos (+ centerpos (t-rand:kr 0 0.01 clk))]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC

#+RESULTS:
: #<synth: general-trand-synth>

#+BEGIN_SRC clojure
(general-trand-synth 0)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/general-trand-synth 98>

* systematize use of knob and pad abstractions
** explain use of functions passed to ON-EVENT event-handlers
any key on your MIDI controller has basically two piece of data
associated with it:

- "note" :: a value or name that stays constant
- "velocity" :: a value that typically changes, but can be more
     complicated depeding on what kind of "note" event it is
     associated with

A function that responds to a given key has to do a few things.

First of all, it needs to be included as part of an event-handler,
which is created with "on-event," and will be given a keyword name.

The function that drives the event-handling can do a variety of
things, and should in most cases have several parameters.

- synth :: we can control any of a variety of synths/instruments
- synth-param :: we want to specify which parameter to control
- controller (pad/knob) number :: which MIDI button to respond to
- place :: the "ref" or "atom" to use for "dereferencing"
- channel :: MIDI messages can be sent via different channels
     (typically 0 or 1 will be default)

Now, depending on what kind of behavior we want out of our controller
button, we will need at least one more parameter.

In the case of a knob, which will be turned and will run through a
continuous stream of numbers, we will seek to continually set the
"place" which stores the value for that knob. That is, we will
"reset!" the ref.

In the case of a pad, we might choose to ignore the "velocity" (that
is, how "hard" we strike the pad, which can be hard to execute
precisely each time and is thus subject to some randomness) and
simply use it as "bang." That is, we just tell it to "activate"
something.

It can "activate" anything you can imagine that will respond to being
"hit." I've used it to "increment/decrement" some value. While a knob
ostensibly does the same thing, "banging" a value up or down allows
for more precise, fine-grain control. Additionally, it is not subject
to the 0-127 values associated with a knob.

So, in the case of using a pad as part of a "counter," we need to pass
a "swap!" function, that is, a function to use with =swap!= to adjust
the value associated with the current state of the pad. The simplest
thing is to just =inc= or =dec= the value. 

Whatever particular operation we use the controller to perform, we
will always be setting and resetting some value, and it is ideal to be
able to know what that value is, as we update it. So, we will want to
print out the value everytime it changes.

Of course, all this will appear to happen simultaneously, but this
illusion is actually created by wrapping all of these actions into a
=do= block, which carries out each action sequentially. Setting the
value of "a piece of state" has to happen before we can use that
value, so the "setter" will always precede the =ctl= that actually
does something with those values. 

The "getting" of the value (note the "set/get" binary, which is just
one conceptually straightforward way to break down change within this
system) happens with =deref= which always returns the current value of
a "piece of state." This value will be used with some parameter as
named by a /keyword/ that comes from what keywords were given to
whichever synth we originally defined.

One last thing to note with the "knob-resetter" is that it takes an
optional "scale" argument. This is a bit of a hack that modifies the
way that the 0-127 values are translated into the synth. Another way
to do this, that may or may not be better depending, would be to use
the actual =scale= function that comes with overtone.

Now, when it comes refactoring in general, we might want to think
about what kind of (and how much) work a particular function used by
the event handler is doing. The following questions might arise:

- Can we print out a more helpful name than the clojure reference?
- How many event handlers is it reasonable to instantiate? 
- Does it make sense to always use =if= and =cond= logic?
- Are there any drawbacks to performing many actions in a =do= block?
- How well do we understand concurrency? Should we be using a =dosync=
  block?
- 
** steps
consolidated steps:

:PROPERTIES:
:ID:       FC7DE6AF-7BCA-4E0F-B10C-19C7CD6E1B42
:END:
Is soundflower running? 
Is audacity running? 
How will you be connecting to a sc server--internally or externally? (Do you want to
be running a pscope?

Is your namespace confused? (Can be an issue, esp. when working with
babel blocks).

make sure MIDI controllers are connected and activated
[[id:2A392B91-CD13-41A8-ADA1-00891B6B072F][are you connected to a controller?]]

make sure buffers are loaded with sound files and play back:
[[id:19C65970-C333-4D09-AD7B-31C158D9C120][make sure buffer was loaded]]

create instrument for granular synth with goldberg:
[[id:F2B83957-0823-4B8B-A77A-4F7D8080B0B9][def an instrument for playing with parameters to TGrains]]

make sure pad and knob refs are defined
[[id:B3DB9C3B-4F2B-40D4-B16C-DF3047C968D9][define atoms for two sets of channels and CC messages]]


define functions for knob and pad usage:
[[id:C945047A-E0FD-439C-9354-6F8CA4989DAE][full knob and pad abstraction]]

start with a given set of event handlers
[[id:F51E8E40-9886-45B3-A06F-7C64DAD2FE7A][create event-handlers for general-tgrains]]


start up a granular synth instance
[[id:AD3B833A-363B-410D-A18E-348F8D7D4182][play goldberg with general-tgrains granular synth]]
[[id:44B87F5F-FCA4-4451-A91C-A2DCD2F9F714][play yancey]]

Play with controller and view values you are using
[[id:119605DE-9AD4-4818-B921-3E6B76396D6C][monitor current state of refs]]

add yancey versions on channel 2
[[id:23951DB5-0EEC-4CB4-B949-C728F4CF2A2D][define control-change knobs for goldberg and Channel 1]]
** improvements, expansions and refactorings desired
- make it easy to start up a variety of given projects with their
  related synths to be manipulated by a common set of controller abstractions

- streamline the process of developing and exploring new synth structures

  - translate more Supercollider Tour of UGens synths to overtone

- play back more than one sound file at a time

  - use Yancey and Goldberg

- use busses and various effects pipelines

- program additional functions for MIDI keys and remaining "five-way
  buttons" interface (Up-down left-right bang)
* understanding the mechanics of busses, synths, panning and groups
** mono defsynth out
#+BEGIN_SRC clojure
  (defsynth test [freq 440 amp 0.1]
    (out 0 (* amp (sin-osc freq))))

  (test)
#+END_SRC

#+RESULTS:
: #<synth: test>#<synth-node[loading]: user/test 89>

#+BEGIN_SRC clojure
  (defsynth test-pan [freq 440 amp 0.1]
    (out 0 (pan2 (* amp (sin-osc freq)))))

  (test-pan)
#+END_SRC

#+RESULTS:
: #<synth: test-pan>#<synth-node[loading]: user/test-pan 90>


#+BEGIN_SRC clojure
  (defsynth test-pan2 [freq1 440 freq1-pan -0.5 freq2 443 freq2-pan 0.5 amp 0.1]
    (out 0 (pan2 (* amp (sin-osc freq1)) freq1-pan 0.5))
    (out 1 (pan2 (* amp (saw freq2)) freq2-pan 0.5))
    )

  (test-pan2)
#+END_SRC

#+RESULTS:
: #<synth: test-pan2>#<synth-node[loading]: user/test-pan2 94>
* automate listening with TGrains
** use line:kr to move through centerpos
:PROPERTIES:
:ID:       326223F4-AA19-4058-A07C-3E5F5DB9AFF5
:END:

#+BEGIN_SRC clojure
(def gold (general-tgrains-synth :buffer 0 :centerpos (line:kr 0.0 100 30)))
#+END_SRC

#+RESULTS:
: #'user/gold

#+BEGIN_SRC clojure
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* 2 track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

#+RESULTS:
: #<synth: tgrains-line-synth>


Plays almost exactly like regular track
#+BEGIN_SRC clojure
(def gold-line (tgrains-line-synth))
#+END_SRC

#+RESULTS:
: #'user/gold-line

#+BEGIN_SRC clojure
(def yanc-line (tgrains-line-synth :buffer 1))
#+END_SRC

#+RESULTS:
: #'user/yanc-line
* Exploring Overtone examples directory
** "Space Organ" example
Taken from:
[[file:~/Github-repos/overtone-source/src/overtone/examples/workshops/resonate2013/ex05_synthesis.clj][file:~/Github-repos/overtone-source/src/overtone/examples/workshops/resonate2013/ex05_synthesis.clj]]

#+BEGIN_SRC clojure :results silent
;; change pitches of original
  (demo 60 (g-verb (sum (map #(blip (* (midicps (duty:kr % 0 (dseq [24 27 31 35 38] INF))) %2) (mul-add:kr (lf-noise1:kr 1/2) 3 4)) [1 1/2 1/4] [1 4 8])) 200 8))
#+END_SRC

#+BEGIN_SRC clojure
   ;; A more easy-on-the-eyes version would look like this:
   (demo 60
         (let [;; First create 3 frequency generators at different
               ;; tempos/rates [1 1/2 1/4]
               ;; Each generator will cycle (at its own pace) through the sequence of
               ;; notes given to dseq and convert notes into actual frequencies
               f (map #(midicps (duty:kr % 0 (dseq [24 27 31 36 41] INF)))
                      [1 1/2 1/4])
               ;; Next we transpose the frequencies over several octaves
               ;; and create a band limited impulse generator (blip) for
               ;; each of the freq gens. The blip allows us to configure the number
               ;; of overtones/harmonics used, which is constantly modulated by a
               ;; noise generator between 1 and 7 harmonics...
               tones (map #(blip (* % %2)
                                 (mul-add:kr (lf-noise1:kr 1/4) 3 4))
                          f [1 4 8])]
           ;; finally, all tones are summed into a single signal
           ;; and passed through a reverb with a large roomsize and decay time...
           (g-verb (sum tones) 200 8)))
   )
#+END_SRC

#+RESULTS:
: nil
* Use Macros to wrap over commonly used overtone idioms
** simple example over =demo=
Note that this works, but if we try to pass a "duration" argument to
=demo=...
#+BEGIN_SRC clojure
(defn test
  [freq]
  (demo (sin-osc freq)))
#+END_SRC

#+RESULTS:
: #'overtone.examples.buses.getonthebus/test

...Clojure complains:

#+BEGIN_SRC clojure
(defn test1
  [dur]
  (demo dur (sin-osc)))
#+END_SRC

#+RESULTS:

However, using a macro...

#+BEGIN_SRC clojure
(defmacro my-demo
  [dur]
  `(demo ~dur (sin-osc)))
#+END_SRC

#+RESULTS:
: #'overtone.examples.buses.getonthebus/my-demo

#+BEGIN_SRC clojure
(my-demo 0.1)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: overtone.exam736/audition-synth 212>
** pass in ugens to demo

#+BEGIN_SRC clojure
(defmacro my-ugen-demo
  [dur ugen]
  `(demo ~dur (~ugen)))
#+END_SRC

#+RESULTS:
: #'user/my-ugen-demo

See examples of usage below
** the four waveforms (a la Nonesuch Guide to Electronic Music)

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 sin-osc)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 saw)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 lf-tri)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(my-ugen-demo 5 pulse)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (pulse 440 0.1))
#+END_SRC

#+BEGIN_SRC clojure
(demo 4 (pulse 440 0.9))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 277>

#+BEGIN_SRC clojure :results silent
(demo 4 (pulse 440 0.5))

;; square being a special case of pulse/rectangular
(my-ugen-demo 5 square)
#+END_SRC





#+BEGIN_SRC clojure :results silent
(my-ugen-demo 0.1 blip)
#+END_SRC
* pass interesting frequencies to examples
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (sin-osc:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 990 (* 400 (pink-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (brown-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise0 10)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise1 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise2 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-brown-noise0 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-clip-noise 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 350 (* (* 100 (lf-brown-noise0:kr 5)) (lf-clip-noise 4)))))
#+END_SRC

* figure out how to pass interesting frequencies to examples

** use simple waveforms
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (sin-osc:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-saw:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-pulse:kr 1) 100))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 440 (* (lf-tri:kr 1) 100))))
#+END_SRC

** use randomness
#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ (weighted-choose [10 400] [0.1 0.9])  (* (weighted-choose [10 400] [0.1 0.9]) (pink-noise)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (let [hz  (choose (take 5 (reverse (map #(* % 100) (range 10)))))]
    (demo 2 (sin-osc (+ hz (* 400 (pink-noise))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (brown-noise)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise0 10)))))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise1 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-noise2 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-brown-noise0 10)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 4 (sin-osc (+ 800 (* 100 (lf-clip-noise 10)))))
#+END_SRC

#+BEGIN_SRC clojure
(demo 4 (sin-osc (+ 350 (* (* 100 (lf-brown-noise0:kr 5)) (lf-clip-noise 4)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (sin-osc (* 0.5 (+ (* 900 (lf-brown-noise0:kr 20)) (* (* 100 (lf-brown-noise0:kr 1)) (lf-clip-noise 2))))))
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 338>


#+RESULTS:
: #<synth-node[loading]: user/audition-synth 338>

* using multichannel expansions and mix and 

** use 'repeatedly' to approximate sclang expansions
#+BEGIN_SRC clojure :results silent
(demo (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (mix [(sin-osc 220) (sin-osc 420)]))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(dotimes [n 2] (demo (sin-osc (+ 200 (rand-int 999)))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(dotimes [n 2] (demo (sin-osc (+ 200 (rand-int 999)))))
#+END_SRC

#+BEGIN_SRC clojure
  (definst clang [note 60 amp 0.3]
    (let [freq (midicps note)]
      (* amp
         (mix (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))
         (env-gen (lin 0.01 1 1 1) 1 1 0 1 FREE))))
#+END_SRC

#+RESULTS:
: #<instrument: clang>

#+BEGIN_SRC clojure :results silent
(clang)
#+END_SRC


#+BEGIN_SRC clojure
  (defsynth clang1 []
      (out 0 (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC

#+RESULTS:
: #<synth: clang1>

#+BEGIN_SRC clojure :results silent
(clang1)
#+END_SRC

** develop macro and event handler to for random synth player
#+BEGIN_SRC clojure
(defmacro play-rand []
`(demo 0.4 (mix (repeatedly 10 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC

#+RESULTS:
: #'sc-one/play-rand

#+BEGIN_SRC clojure :results silent
(play-rand)
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand2 [amp]
`(demo 0.4       (* amp
         (mix (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))
         (env-gen (lin 0.01 1 1 1) 1 1 0 1 FREE))))
#+END_SRC

#+RESULTS:
: #'sc-one/play-rand2

#+BEGIN_SRC clojure
(play-rand2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo 10 (* (env-gen (lin 0 1 1 1 1) 1 1 0 1 FREE) (repeatedly 5 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand2 []
`(demo 10 (* (env-gen (lin 0 1 1 1 1) 1 1 0 1 FREE) (repeatedly 5 #(sin-osc (+ 200 (rand-int 999)))))))
#+END_SRC
#+RESULTS:
: #'user/play-rand2

#+BEGIN_SRC clojure :results silent
(play-rand2)
#+END_SRC

#+BEGIN_SRC clojure
(defmacro play-rand3 [dur]
`(demo ~dur (repeatedly 5 #(sin-osc (+ 200 (rand-int 999))))))
#+END_SRC
#+RESULTS:
: #'user/play-rand3

#+BEGIN_SRC clojure
(play-rand3 0.1)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 38>


#+BEGIN_SRC clojure
(defmacro play-rand4 [dur hz]
`(demo ~dur (repeatedly 5 #(sin-osc (+ ~hz (rand-int 999))))))
#+END_SRC

#+RESULTS:
: #'user/play-rand4

#+BEGIN_SRC clojure
(play-rand4 0.2 300)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/audition-synth 53>

#+BEGIN_SRC clojure
(on-event [:midi :note-on]
(fn [e] (play-rand4 0.2 300))
::rand-handler)
#+END_SRC

#+RESULTS:
: :added-async-handler

#+BEGIN_SRC clojure
(remove-event-handler ::rand-handler)
#+END_SRC
