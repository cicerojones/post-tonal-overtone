* Overtone Cheat Sheet 0.9.1 in one subtree
** Instruments (need to be manually referred)
*** overtone.inst.drum
   Drums
kick
kick2
kick3
kick4
dub-kick
dry-kick
small-hat
closed-hat
close-hat2
open-hat
hat3
soft-hat
noise-hat
round-kick
snare
snare2
noise-snare
tone-snare
tom
clap
bing
dance-kick
quick-kick
haziti-clap
*** overtone.inst.piano
   Piano piano
*** overtone.inst.sampled-piano
   Sampled Piano
 sampled-piano
*** overtone.inst.sampler
   Sampler
 granular
*** overtone.inst.bass
   Bass
 bass grunge-bass vintage-bass daf-bass
*** overtone.inst.synth
   Synth

 ticker ping tb303 mooger rise-fall-pad pad overpad buzz ks1 ks-stringer fm-demo harmonic-swimming whoahaha bubbles supersaw cs80lead simple-flute overtone.inst.io IO mic

** Synths (need to be manually referred)
*** overtone.synth.sampled-piano)
   Sampled Piano

 sampled-piano

*** overtone.synth.stringed
   Stringed
 s guitar

*** overtone.synth.ixi
   Ixi impulser kick kick2 kick3

*** overtone.synth.retro
   Retro tb-303

*** overtone.synth.sts
   STS prophet

** REPL helpers

*** Documentation
odoc ugen-doc find-ugen find-ugen-doc

*** Examples
examples example get-example

*** Shell
ls grep

*** Synths
unify-synthdef

*** Pretty Printing
opp pp-synth pp-unified-synth
  pp-sc-synth pp-unified-sc-synth

** Timing
*** Scheduling
**** Function Application 
***** now
  #+BEGIN_SRC clojure :results output
(doc now)  
  #+END_SRC

  #+RESULTS:
  : -------------------------
  : overtone.live/now
  : ([])
  :   Returns the current time in ms
***** after-delay
#+BEGIN_SRC clojure :results output
(doc after-delay)
#+END_SRC 

#+RESULTS:
: -------------------------
: overtone.live/after-delay
: ([ms-delay fun] [ms-delay fun description])
:   Schedules fun to be executed after ms-delay milliseconds. Pool
:   defaults to the player-pool.
***** periodic
 #+BEGIN_SRC clojure :results output 
 (doc periodic)
 #+END_SRC

 #+RESULTS:
 : -------------------------
 : overtone.live/periodic
 : ([ms-period fun] [ms-period fun initial-delay] [ms-period fun initial-delay description])
 :   Calls fun every ms-period, and takes an optional initial-delay for
 :   the first call in ms.

  interspaced apply-by apply-at
***** OSC 
at
***** Stopping 
stop-player kill-player
***** Feedback 
show-schedule
*** Metronome
**** Create 
 metronome
**** Manipulate
 metro-start
 metro-tick
 metro-beat
 metro-bpm
 metro-tock
 metro-bar
 metro-bpb
**** bps 
beat-ms
***** 
** Studio
  Mixer
  Control volume input-gain
  MIDI
  Connected Controllers midi-connected-devices
  midi-connected-receivers
  midi-find-connected-devices
  midi-find-connected-device
  midi-find-connected-receivers
  midi-find-connected-receiver
  Info midi-device-num
  midi-full-device-key
  Player midi-poly-player midi-player-stop
  midi-inst-controller
  Discovery midi-capture-next-controller-control-key
  midi-capture-next-controller-key
  Keys midi-device-keys
  midi-mk-control-key-keyword
  State midi-agent-for-control
  Scope
  Create & Reset scope pscope spectrogram
  Recording
  Stop & Start recording-start recording-stop
  Query recording?
  Inst Effects
  Instrument inst-volume inst-out-bus inst-fx! clear-fx
  FX fx-noise-gate fx-compressor fx-limiter
  fx-sustainer fx-freeverb fx-reverb
  fx-echo fx-chorus fx-distortion
  fx-distortion2 fx-distortion-tubescreamer
  fx-bitcrusher fx-rlpf fx-rhpf fx-feedback
  fx-feedback-distortion

** Synth Design
  Design definst defsynth
  Examples defexamples
  CGens defcgen
  Auditioning demo run
  Checking with-no-ugen-checks with-ugen-debugging
  Arguments synth-args synth-arg-index

** Synth Control
  Live Control ctl kill
  Node Liveness inactive-node-modification-error
  inactive-buffer-modification-error
  block-node-until-ready?
  without-node-blocking
  with-inactive-node-modification-error
  with-inactive-buffer-modification-error
  with-inactive-modification-error

** Event Handling
  Add on-event on-sync-event on-latest-event
  oneshot-event oneshot-sync-event
  Fire event sync-event
  Remove remove-event-handler
  Debug event-debug-on event-debug-off
  event-monitor-on event-monitor-off
  event-monitor-timer event-monitor
  event-monitor-keys
  Ugen Triggers trig-id on-trigger on-latest-trigger
  on-sync-trigger

** Nodes & Groups
  Create & Free node group node-free group-free
  group-clear group-deep-clear
  Manipulate node-start node-pause node-place
  node-control node-control-range
  node-map-controls
  node-map-n-controls
  group-prepend-node
  group-append-node
  Info node? node-live? node-loading?
  node-active? node-tree
  pp-node-tree node-get-control
  node-get-controls
  Foundation Groups foundation-overtone-group
  foundation-output-group
  foundation-monitor-group
  foundation-input-group
  foundation-user-group
  foundation-default-group
  foundation-safe-group
  foundation-safe-pre-default-group
  foundation-safe-post-default-group
  Manipulation Handlers on-node-destroyed on-node-created
  on-node-paused on-node-started
  Event Keys node-destroyed-event-key
  node-created-event-key
  node-paused-event-key
  node-started-event-key

** Server
*** Startup
 boot-server boot-internal-server
  boot-external-server
  connect-external-server
*** Shutdown
 kill-server
*** Control
 stop clear stop-all clear-all
*** OSC Communication
 snd recv clear-msg-queue at
  snd-immediately
*** Diagnostic
 server-status server-info
  server-opts server-connected?
  server-disconnected?
  server-connecting?
  internal-server? external-server?
  connection-info server-sample-rate
  server-num-output-buses
  server-num-input-buses
  server-num-audio-buses
  server-num-buffers
  ensure-connected!
*** Debug
 sc-osc-log-on sc-osc-log-off
  sc-osc-log sc-debug-on
  sc-debug-off external-server-log
  sc-osc-debug-on sc-osc-debug-off

** Visualisation
  Graphviz
  Dot Notation graphviz
  Show PDF show-graphviz-synth

** External Assets
  Generic URLs
  Auto cache & Return Path asset-path asset-seq
  asset-bundle-path
  asset-bundle-dir
  Freesound.org
  Playable Function freesound
  Auto cache & Query freesound-info freesound-path
  freesound-pack-info
  freesound-pack-dir
  freesound-search freesound-searchm
  freesound-search-paths

** Algorithmic Composition
*** Chance
**** Choice
***** choose
 choose-n weighted-choose
****** documentation examples
#+BEGIN_SRC clojure :results output
(doc choose-n)
#+END_SRC

#+RESULTS:
: -------------------------
: overtone.live/choose-n
: ([n col])
:   Choose n random elements from col.

#+BEGIN_SRC clojure :results output
(doc weighted-choose)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
overtone.live/weighted-choose
([val-prob-map] [vals probabilities])
  Returns an element from list vals based on the corresponding
  probabilities list. The length of vals and probabilities should be
  similar and the sum of all the probabilities should be 1. It is also
  possible to pass a map of val -> prob pairs as a param.

  The following will return one of the following vals with the
  corresponding probabilities:
  1 -> 50%
  2 -> 30%
  3 -> 12.5%
  4 -> 7.5%
  (weighted-choose [1 2 3 4] [0.5 0.3 0.125 0.075])
  (weighted-choose {1 0.5, 2 0.3, 3 0.125, 4 0.075})
#+end_example

***** Dice
 weighted-coin ranged-rand
**** Scaling
***** Range
 scale-range
***** Rounding
 closest-to round-to
**** Trig
***** Scaled
 cosr sinr tanr
**** Functions
***** Cycling
 cycle-fn
**** List
***** Rotation
 rotate
***** Creation
 fill

** Music
  Pitch
  Ratios unison octave fifth sixth third fourth
  min-third min-sixth
  Note Shifting shift flat sharp invert inc-first
  dec-last
  Notes note octave-note nth-octave
  nth-equal-tempered-freq
  canonical-pitch-class-name note-info
  mk-midi-string match-note
  Scales scale resolve-scale scale-field
  nth-interval resolve-degree degree->int
  degree->interval degrees->pitches
  resolve-degree resolve-degrees
  interval-freq
  Chords chord resolve-chord rand-chord
  invert-chord chord-degree
  Discovery find-scale-name find-note-name
  find-pitch-class-name find-chord
  Frequencies cents midi->hz hz->midi
  Amplitude db->amp

** Sound Data
*** Buffers
**** Create & Free
 buffer buffer-free
  buffer-alloc-read
**** Generate Buffer Data
data->wavetable
  create-buffer-data
**** Read & Write To Server
 buffer-read buffer-write!
  buffer-write-relay! buffer-fill!
  buffer-set! buffer-get
  buffer-save buffer-data
  buffer-read
**** Write To Filesystem
 write-wav
**** Streaming In & Out

buffer-stream buffer-stream?
  buffer-stream-close buffer-cue
  buffer-cue? buffer-cue-pos
  buffer-stream-close
**** Query
buffer? buffer-info?
  file-buffer? buffer-out-stream?
  buffer-in-stream?

  Info
 buffer-info num-frames buffer-id

  Samples
  Create
 load-sample load-samples sample defsample
  Playback
 mono-player stereo-player
  Busses
  Create & Free
 control-bus audio-bus free-bus
  Modify & Read
 control-bus-set! control-bus-set-range!
  control-bus-get control-bus-get-range
  Query
 bus? control-bus? audio-bus?
  Info
 bus-id
  Monitor
 bus-monitor control-bus-monitor
  audio-bus-monitor

** Persistence
  Local Store
  Access store-get store-set! store

** CGens
  Audio In sound-in
  Buffer Playback scaled-play-buf scaled-v-disk
  Control hold
  Oscillators pm-osc square
  Mix mix splay sum
  Pitch add-cents
  Tapping tap
  Range range-lin

** ugens
*** UGen Helper Constants
   Done Actions NO-ACTION PAUSE FREE FREE-AND-BEFORE
   FREE-AND-AFTER FREE-AND-GROUP-BEFORE
   FREE-AND-GROUP-AFTER
   FREE-UPTO-THIS FREE-FROM-THIS-ON
   FREE-PAUSE-BEFORE FREE-PAUSE-AFTER
   FREE-AND-GROUP-BEFORE-DEEP
   FREE-AND-GROUP-AFTER-DEEP FREE-CHILDREN
   FREE-GROUP
   FFT Windows SINE HANN RECT
   Lines LINEAR LIN EXPONENTIAL EXP
   Onset Analysis POWER MAGSUM COMPLEX RCOMPLEX PHASE
   WPHASE MKL
   Infinity INFINITE INF
   UGen Envelope Helper Functions
   env-perc env-triangle env-sine env-lin env-cutoff
   env-dadsr env-adsr env-asr

*** Unary UGens
   neg not-pos? abs ceil floor frac sign squared cubed
   sqrt exp reciprocal midicps cpsmidi midiratio
   ratiomidi dbamp ampdb octcps cpsoct log log2
   log10 sin cos tan asin acos atan sinh cosh tanh
   distort softclip rect-window han-window wel-window
   tri-window

*** Binary UGens
   + - * / mod = not= < > <= >= min max and or xor
   round round-up round-down atan2 hypot hypot-aprox
   pow ring1 ring2 ring3 ring4 difsqr sumsqr sqrsum
   sqrdif absdif thresh amclip scale-neg clip2 excess
   fold2 wrap2
   B Equalization Suit UGens
   b-low-pass b-hi-pass b-all-pass b-band-pass
   b-band-stop b-peak-eq b-low-shelf b-hi-shelf
   Buffer IO UGens
   play-buf t-grains buf-rd buf-wr record-buf
   scope-out local-buf max-local-bufs set-buf
   clear-buf

*** Chaos UGens
   quad-n quad-l quad-c cusp-n cusp-l gbman-n
   gbman-l henon-n henon-l henon-c latoocarfian-n
   latoocarfian-l latoocarfian-c lin-cong-n lin-cong-l
   lin-cong-c standard-n standard-l fb-sine-n
   fb-sine-l fb-sine-c lorenz-l

*** Compander
   amplitude compander normalizer limiter

*** Delay UGens
   delay1 delay-n delay-l delay-c comb-n comb-l
   comb-c allpass-n allpass-l allpass-c buf-delay-n
   buf-delay-l buf-delay-c buf-comb-n buf-comb-l
   buf-comb-c buf-allpass-n buf-allpass-l
   buf-allpass-c

*** Demand UGens
   demand duty t-duty demand-env-gen dseries dgeom
   dbufrd dbufwr dseq dser dshuf drand dxrand dswitch1
   dswitch dwhite dbrown dibrown dstutter donce dpoll

*** Envelope Ugens

**** done
done

**** free-self
free-self

**** pause-self
pause-self

**** free-self-when-done
free-self-when-done

**** pause-self-when-done
pause-self-when-done

**** pause
pause

**** free
free
**** env-gen
 #+BEGIN_SRC clojure :results output 
(doc env-gen)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/env-gen
 ([envelope gate level-scale level-bias time-scale action])

   [envelope :none, gate 1.0, level-scale 1.0, level-bias 0.0, time-scale 1.0, action 0]

   envelope    - An Array of Controls. 
   gate        - This triggers the envelope and 
                 holds it open while > 0. If the 
                 envelope is fixed-length (e.g. 
                 perc), the gate argument is used 
                 as a simple trigger. If it is an 
                 sustaining envelope (e.g. adsr, 
                 asr), the envelope is held open 
                 until the gate becomes 0, at which 
                 point is released. If the gate of 
                 an env-gen is set to -1 or below, 
                 then the envelope will cutoff 
                 immediately. The time for it to 
                 cutoff is the amount less than -1, 
                 with -1 being as fast as possible, 
                 -1.5 being a cutoff in 0.5 
                 seconds, etc. The cutoff shape is 
                 linear. 
   level-scale - Scales the levels of the 
                 breakpoints. 
   level-bias  - Offsets the levels of the 
                 breakpoints. 
   time-scale  - Scales the durations of the 
                 segments. 
   action      - An integer representing an action 
                 to be executed when the env is 
                 finished playing. This can be used 
                 to free the enclosing synth, etc. 

   Envelope generator, interpolates across a path of control 
   points over time, see the overtone.sc.envelope functions 
   to generate the control points array

   Note:

   The actual minimum duration of a segment is not zero, but 
   one sample step for audio rate and one block for control 
   rate. This may result in asynchronicity when in two 
   envelopes of different number of levels, the envelope 
   times add up to the same total duration. Similarly, when 
   modulating times, the new time is only updated at the end 
   of the current segment - this may lead to asynchronicity 
   of two envelopes with modulated times. 

   Categories: Envelopes
   Rates: [ :ar, :kr ]
   Default rate: :kr
#+end_example

**** linen
 #+BEGIN_SRC clojure :results output 
(doc linen)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/linen
 ([gate attack-time sus-level release-time action])

   [gate 1.0, attack-time 0.01, sus-level 1.0, release-time 1.0, action 0]

   gate         - Input trigger 
   attack-time  - Time taken to rise to susLevel in 
                  seconds 
   sus-level    - Level to hold the envelope at 
                  until gate is triggered 
   release-time - Time to fall from susLevel back 
                  to 0 after the gate has been 
                  triggered 
   action       - Done action 

   A linear envelope generator, rises to sus-level over 
   attack-time seconds and after the gate goes non-positive 
   falls over release-time to finally perform the (optional) 
   action 

   Categories: Envelopes
   Rates: [ :kr ]
   Default rate: :kr
#+end_example

**** i-env-gen
 #+BEGIN_SRC clojure :results output 
(doc i-env-gen)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/i-env-gen
 ([ienvelope index])

   [ienvelope :none, index :none]

   ienvelope - An InterplEnv (this is static for 
               the life of the UGen) 
   index     - A point to access within the 
               InterplEnv 

   Plays back break point envelopes from the index point. 

   Categories: Envelopes
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

*** Fixed Frequency Oscillator UGens
   f-sin-osc klang klank blip saw pulse p-sin-grain

*** FFT UGens
   fft ifft pv-mag-above pv-mag-below pv-mag-clip
   pv-local-max pv-mag-smear pv-bin-shift pv-mag-shift
   pv-mag-squared pv-mag-noise pv-phase-shift90
   pv-phase-shift270 pv-conj pv-phase-shift
   pv-brick-wall pv-bin-wipe pv-mag-mul pv-copy-phase
   pv-copy pv-max pv-min pv-mul pv-div pv-add
   pv-mag-div pv-rand-comb pv-rect-comb pv-rect-comb2
   pv-rand-wipe pv-diffuser pv-mag-freeze
   pv-bin-scramble fft-trigger
   Extra FFT UGens
   pv-conformal-map convolution convolution2
   convolution2-l stereo-convolution2-l convolution3
   pv-jenson-andersen pv-hainsworth-foote running-sum

*** Filter UGens
   resonz one-pole one-zero two-pole two-zero apf
   integrator decay decay2 lag lag2 lag3 ramp lag-ud
   lag2-ud lag3-ud leak-dc rlpf rhpf hpf bpf brf
   mid-eq lpz1 lpz2 hpz1 hpz2 slope bpz2 median slew
   sos ringz formlet detect-silence

*** Grain UGens
   grain-sin grain-in warp1

*** Information UGens
   sample-rate sample-dur radians-per-sample
   control-rate control-dur subsample-offset
   num-output-busses num-input-busses num-audio-busses
   num-control-busses num-buffers num-running-synths
   buf-sample-rate buf-rate-scale buf-frames
   buf-samples buf-dur buf-channels check-bad-values
   poll
   Input UGens
   mouse-x mouse-y mouse-button key-state
   IO UGens
   disk-out disk-in v-disk-in in local-in lag-in
   in-feedback in-trig shared-in out replace-out
   offset-out local-out x-out shared-out

*** Line Ugens
   line x-line lin-exp lin-lin amp-comp amp-comp-a k2a
   a2k t2k t2a dc silent

*** Machine Listening UGens
   beat-track loudness onsets key-track mfcc
   beat-track2 spec-flatness spec-pcile spec-centroid

*** Miscellaneous UGens
   pitch-shift pluck part-conv hilbert freq-shift
   g-verb free-verb free-verb2 moog-ff spring ball
   t-ball check-bad-values gendy1 gendy2 gendy3

*** Noise UGens
   white-noise brown-noise pink-noise clip-noise
   gray-noise crackle logistic lf-noise0 lf-noise1
   lf-noise2 lf-clip-noise lfd-noise0 lfd-noise1
   lfd-noise3 ldf-clip-noise hasher mantissa-mask dust
   dust2

*** [#A] Oscillator UGens
 
****  osc
 #+BEGIN_SRC clojure :results output 
(doc osc)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/osc
 ([buffer freq phase])

   [buffer :none, freq 440.0, phase 0.0]

   buffer - Lookup buffer 
   freq   - Frequency in Hertz 
   phase  - Phase offset or modulator in radians 

   Linear interpolating wavetable lookup oscillator with 
   frequency and phase modulation inputs.

   This oscillator requires a buffer to be filled with a 
   wavetable format signal. This preprocesses the Signal into 
   a form which can be used efficiently by the Oscillator. 
   The buffer size must be a power of 2.

   This can be achieved by creating a Buffer object and 
   sending it one of the b_gen messages (sine1, sine2, sine3) 
   with the wavetable flag set to true.

   This can also be achieved by creating a Signal object and 
   sending it the 'asWavetable' message, saving it to disk, 
   and having the server load it from there. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  sin-osc
 #+BEGIN_SRC clojure :results output 
(doc sin-osc)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/sin-osc
 ([freq phase mul add])

   Sine table lookup oscillator 

   [freq 440.0, phase 0.0, mul 1, add 0]

   freq  - Frequency in Hertz 
   phase - Phase offset or modulator in radians 
   mul   - Output will be multiplied by this value. 
   add   - This value will be added to the output. 

   Outputs a sine wave with values oscillating between -1 and 
   1 similar to osc except that the table has already been 
   fixed as a sine table of 8192 entries.

   Sine waves are often used for creating sub-basses or are 
   mixed with other waveforms to add extra body or bottom end 
   to a sound. They contain no harmonics and consist entirely 
   of the fundamental frequency. This means that they're not 
   suitable for subtractive synthesis i.e. passing through 
   filters such as a hpf or lpf. However, they are useful for 
   additive synthesis i.e. adding multiple sine waves 
   together at different frequencies, amplitudes and phase to 
   create new timbres. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  sin-osc-fb
 #+BEGIN_SRC clojure :results output 
(doc sin-osc-fb)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/sin-osc-fb
 ([freq feedback])

   Sine oscillator with phase modulation feedback 

   [freq 440.0, feedback 0.0]

   freq     - Frequency of oscillator 
   feedback - Amplitude of phase feedback in 
              radians 

   Different feedback values results in a modulation between 
   a sine wave and a sawtooth like wave. Overmodulation 
   causes chaotic oscillation. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example


****  osc-n
 #+BEGIN_SRC clojure :results output 
(doc osc-n)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/osc-n
 ([bufnum freq phase])

   [bufnum :none, freq 440.0, phase 0.0]

   bufnum - Buffer index. The buffer size must be a 
            power of 2. The buffer should NOT be 
            filled using Wavetable format (b_gen 
            commands should set wavetable flag to 
            false. Raw signals (not converted with 
            asWavetable) can be saved to disk and 
            loaded into the buffer. 
   freq   - Frequency in Hertz 
   phase  - Phase offset or modulator in radians 

   Noninterpolating wavetable lookup oscillator with 
   frequency and phase modulation inputs.

   It is usually better to use the interpolating oscillator. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  v-osc
 #+BEGIN_SRC clojure :results output 
(doc v-osc)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/v-osc
 ([bufpos freq phase])

   [bufpos :none, freq 440.0, phase 0.0]

   bufpos - Buffer index. Can be swept continuously 
            among adjacent wavetable buffers of the 
            same size. 
   freq   - Frequency in Hertz 
   phase  - Phase offset of modulator in radians 

   A wavetable lookup oscillator which can be swept smoothly 
   across wavetables. All the wavetables must be allocated to 
   the same size. Fractional values of table will interpolate 
   between two adjacent tables.

   This oscillator requires at least two buffers to be filled 
   with a wavetable format signal. This preprocesses the 
   Signal into a form which can be used efficiently by the 
   Oscillator. The buffer size must be a power of 2. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  v-osc3
 #+BEGIN_SRC clojure :results output 
(doc v-osc3)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/v-osc3
 ([bufpos freq1 freq2 freq3])

   [bufpos :none, freq1 110.0, freq2 220.0, freq3 440.0]

   bufpos - Buffer index. Can be swept continuously 
            among adjacent wavetable buffers of the 
            same size. 
   freq1  - Frequency in Hertz of first oscillator 
   freq2  - Frequency in Hertz of second oscillator 
   freq3  - Frequency in Hertz of third oscillator 

   Three variable wavetable oscillators.

   A wavetable lookup oscillator which can be swept smoothly 
   across wavetables. All the wavetables must be allocated to 
   the same size. Fractional values of table will interpolate 
   between two adjacent tables. This unit generator contains 
   three oscillators at different frequencies, mixed 
   together.

   This oscillator requires at least two buffers to be filled 
   with a wavetable format signal. This preprocesses the 
   Signal into a form which can be used efficiently by the 
   Oscillator. The buffer size must be a power of 2. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  c-osc
 #+BEGIN_SRC clojure :results output 
(doc c-osc)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/c-osc
 ([bufnum freq beats])

   [bufnum :none, freq 440.0, beats 0.5]

   bufnum - The number of a buffer filled in 
            wavetable format 
   freq   - Frequency in Hertz 
   beats  - Beat frequency in Hertz 

   Chorusing wavetable lookup oscillator. Produces sum of two 
   signals at (freq +/- (beats / 2)). Due to summing, the 
   peak amplitude is twice that of the wavetable. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example


****  formant
 #+BEGIN_SRC clojure :results output 
(doc formant)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/formant
 ([fundfreq formfreq bwfreq])

   [fundfreq 440.0, formfreq 1760.0, bwfreq 880.0]

   fundfreq - Fundamental frequency in Hertz 
              (control rate) 
   formfreq - Formant frequency in Hertz (control 
              rate) 
   bwfreq   - Pulse width frequency in Hertz. 
              Controls the bandwidth of the formant 
              (control rate) 

   Generates a set of harmonics around a formant frequency at 
   a given fundamental frequency.

   The frequency inputs are read at control rate only, so if 
   you use an audio rate UGen as an input, it will only be 
   sampled at the start of each audio synthesis block. 

   Categories: Generators -> Deterministic
   Rates: [ :ar ]
   Default rate: :ar
#+end_example


****  lf-saw
 #+BEGIN_SRC clojure :results output 
(doc lf-saw)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-saw
 ([freq iphase])

   [freq 440.0, iphase 0.0]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset. For efficiency 
            reasons this is a value ranging from 0 
            to 2. 

   Low freq (i.e. not band limited) sawtooth oscillator 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  lf-par
 #+BEGIN_SRC clojure :results output 
(doc lf-par)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-par
 ([freq iphase])

   [freq 440.0, iphase 0.0]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset. For efficiency 
            reasons this is a value ranging from 0 
            to 2. 

   A non band-limited parabolic oscillator outputing a high 
   of 1 and a low of zero. 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  lf-cub
 #+BEGIN_SRC clojure :results output 
(doc lf-cub)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-cub
 ([freq iphase])

   [freq 440.0, iphase 0.0]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset. For efficiency 
            reasons this is a value ranging from 0 
            to 2. 

   An oscillator outputting a sine like shape made of two 
   cubic pieces 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  lf-tri
 #+BEGIN_SRC clojure :results output 
(doc lf-tri)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-tri
 ([freq iphase])

   a non-band-limited triangle oscillator 

   [freq 440.0, iphase 0.0]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset. For efficiency 
            reasons this is a value ranging from 0 
            to 2. 

   The triangle wave shape features two linear slopes and is 
   not as harmonically rich as a sawtooth wave since it only 
   contains odd harmonics (partials). Ideally, this type of 
   wave form is mixed with a sine, square or pulse wave to 
   add a sparkling or bright effect to a sound and is often 
   employed on pads to give them a glittery feel. 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  lf-gauss
 #+BEGIN_SRC clojure :results output 
(doc lf-gauss)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-gauss
 ([duration width iphase loop action])

   [duration 1, width 0.1, iphase 0.0, loop 1, action 0]

   duration - Duration of one full cycle ( for freq 
              input: dur = 1 / freq ) 
   width    - Relative width of the bell. Best to 
              keep below 0.25 when used as 
              envelope. 
   iphase   - Initial offset 
   loop     - If loop is > 0, UGen oscillates. 
              Otherwise it calls the done action 
              after one cycle 
   action   - Action to be evaluated after cycle 
              completes. Default: NO-ACTION. 

   A non-band-limited gaussian function oscillator. Output 
   ranges from minval to 1.

   LFGauss implements the formula: f(x) = exp(squared(x - 
   iphase) / (-2.0 * squared(width))) where x is to vary in 
   the range -1 to 1 over the period dur. minval is the 
   initial value at -1 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  lf-pulse
 #+BEGIN_SRC clojure :results output 
(doc   lf-pulse)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/lf-pulse
 ([freq iphase width])

   [freq 440.0, iphase 0.0, width 0.5]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset in cycles ( 0..1 ) 
   width  - Pulse width duty cycle from zero to one 

   A non-band-limited pulse oscillator. Outputs a high value 
   of one and a low value of zero. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :kr
#+end_example

****  var-saw
 #+BEGIN_SRC clojure :results output 
(doc var-saw)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/var-saw
 ([freq iphase width])

   [freq 440.0, iphase 0.0, width 0.5]

   freq   - Frequency in Hertz 
   iphase - Initial phase offset in cycles ( 0..1 ) 
   width  - Duty cycle from zero to one. (0 = 
            downward sawtooth, 0.5 = triangle, 1 = 
            upward sawtooth) 

   A variable duty cycle saw wave oscillator 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  impulse
 #+BEGIN_SRC clojure :results output 
(doc impulse)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/impulse
 ([freq phase])

   [freq 440.0, phase 0.0]

   freq  - Frequency in Hertz 
   phase - Phase offset in cycles ( 0..1 ) 

   Non band limited impulse oscillator. Outputs a single 1 
   every freq cycles per second and 0 the rest of the time. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :kr
#+end_example

****  sync-saw
 #+BEGIN_SRC clojure :results output 
(doc sync-saw)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/sync-saw
 ([sync-freq saw-freq])

   hard sync sawtooth wave oscillator 

   [sync-freq 440.0, saw-freq 440.0]

   sync-freq - Frequency of the fundamental. 
   saw-freq  - Frequency of the slave synched 
               sawtooth wave. saw-freq should 
               always be greater than sync-freq. 

   A sawtooth wave that is hard synched to a fundamental 
   pitch. This produces an effect similar to moving formants 
   or pulse width modulation. The sawtooth oscillator has its 
   phase reset when the sync oscillator completes a cycle. 
   This is not a band limited waveform, so it may alias. 

   Categories: Generators -> Deterministic
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  wrap-index
 #+BEGIN_SRC clojure :results output 
(doc wrap-index)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/wrap-index
 ([bufnum in])

   [bufnum :none, in 0.0]

   bufnum - A buffer or buffer index value. 
   in     - The input signal 

   The input signal value is truncated to an integer value 
   and used as an index into the table (out of range index 
   values are wrapped) 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****    index-in-between
 #+BEGIN_SRC clojure :results output 
(doc   index-in-between)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/index-in-between
 ([bufnum in])

   [bufnum :none, in 0.0]

   bufnum - A buffer or buffer index value. 
   in     - The input signal 

   Finds the (lowest) point in the buffer at which the input 
   signal lies in-between the two values, and returns the 
   index 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  detect-index
 #+BEGIN_SRC clojure :results output 
(doc detect-index)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/detect-index
 ([bufnum in])

   [bufnum :none, in 0.0]

   bufnum - A buffer or buffer index value. 
   in     - The input signal 

   Search a buffer for a value 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  shaper
 #+BEGIN_SRC clojure :results output 
(doc shaper)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/shaper
 ([bufnum in])

   [bufnum :none, in 0.0]

   bufnum - A buffer or buffer index value. 
   in     - The input signal 

   Performs waveshaping on the input signal by indexing into 
   a table 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  degree-to-key
 #+BEGIN_SRC clojure :results output 
(doc degree-to-key)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/degree-to-key
 ([bufnum in octave])

   [bufnum :none, in 0.0, octave 12.0]

   bufnum - Index of the buffer which contains the 
            steps for each scale degree. 
   in     - The input signal. 
   octave - The number of steps per octave in the 
            scale. The default is 12. 

   The input signal value is truncated to an integer value 
   and used as an index into an octave repeating table of 
   note values (indices wrap around the table) 

   Categories: Conversion
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****    select
 #+BEGIN_SRC clojure :results output 
(doc   select)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/select
 ([which array])

   [which :none, array :none]

   which - Index of array to select 
   array - List of ugens to choose from 

   Select the output signal from an array of inputs 

   Categories: Multichannel -> Select
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  vibrato
 #+BEGIN_SRC clojure :results output 
(doc vibrato)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/vibrato
 ([freq rate depth delay onset rate-variation depth-variation iphase])

   Models a slow frequency modulation. 

   [freq 440.0, rate 6, depth 0.02, delay 0.0, onset 0.0, rate-variation 0.04, depth-variation 0.1, iphase 0.0]

   freq            - Fundamental frequency in 
                     Hertz. If the Vibrato UGen is 
                     running at audio rate, this 
                     must not be a constant, but an 
                     actual audio rate UGen 
   rate            - Vibrato rate, speed of wobble 
                     in Hertz. Note that if this is 
                     set to a low value (and 
                     definitely with 0.0), you may 
                     never get vibrato back, since 
                     the rate input is only checked 
                     at the end of a cycle. 
   depth           - Size of vibrato frequency 
                     deviation around the 
                     fundamental, as a proportion 
                     of the fundamental. 0.02 = 2% 
                     of the fundamental. 
   delay           - Delay before vibrato is 
                     established in seconds (a 
                     singer tends to attack a note 
                     and then stabilise with 
                     vibrato, for instance). 
   onset           - Transition time in seconds 
                     from no vibrato to full 
                     vibrato after the initial 
                     delay time. 
   rate-variation  - Noise on the rate, expressed 
                     as a proportion of the rate; 
                     can change once per cycle of 
                     vibrato. 
   depth-variation - Noise on the depth of 
                     modulation, expressed as a 
                     proportion of the depth; can 
                     change once per cycle of 
                     vibrato. The noise affects 
                     independently the up and the 
                     down part of vibrato shape 
                     within a cycle. 
   iphase          - Initial phase of vibrato 
                     modulation, allowing starting 
                     above or below the fundamental 
                     rather than on it. 

   Vibrato is a slow frequency modulation. Consider the 
   systematic deviation in pitch of a singer around a 
   fundamental frequency, or a violinist whose finger wobbles 
   in position on the fingerboard, slightly tightening and 
   loosening the string to add shimmer to the pitch. There is 
   often also a delay before vibrato is established on a 
   note. This UGen models these processes; by setting more 
   extreme settings, you can get back to the timbres of FM 
   synthesis. You can also add in some noise to the vibrato 
   rate and vibrato size (modulation depth) to make for a 
   more realistic motor pattern. The vibrato output is a 
   waveform based on a squared envelope shape with four 
   stages marking out 0.0 to 1.0, 1.0 to 0.0, 0.0 to -1.0, 
   and -1.0 back to 0.0. Vibrato rate determines how quickly 
   you move through these stages. 

   Categories: 
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

****  index
 #+BEGIN_SRC clojure :results output 
(doc index)
 #+END_SRC

 #+RESULTS:
 #+begin_example
 -------------------------
 overtone.live/index
 ([bufnum in])

   [bufnum :none, in 0.0]

   bufnum - A buffer or buffer index value. 
   in     - The input signal 

   The input signal value is truncated to an integer and used 
   as an index into the table 

   Categories: Buffer
   Rates: [ :ar, :kr ]
   Default rate: :ar
#+end_example

*** Pan UGens
   pan2 lin-pan2 pan4 balance2 rotate2 pan-b pan-b2
   bi-pan-b2 decode-b2 pan-az x-fade2 lin-x-fade2

*** Random UGens
   rand-seed rand-id i-rand t-rand ti-rand n-rand
   exp-rand t-exp-rand coin-gate lin-rand

*** STK UGens
   stk-pluck stk-flute stk-bowed stk-mandolin
   stk-saxofony stk-shakers stk-banded-wg
   stk-voic-form stk-modal-bar stk-clarinet
   stk-blow-hole stk-moog stk-bee-three

*** Trig UGens
   tw-index trig1 trig t-delay send-trig send-reply
   latch gate pulse-count set-reset-ff peak
   running-min running-max stepper pulse-divider
   toggle-ff zero-crossing timer sweep phasor
   peak-follower pitch in-range fold clip wrap
   schmidt in-rect trapezoid most-changed least-change
   last-value

*** AY Extra UGens
   ay

*** BBCut2 Extra UGens
   analyse-events2

*** Bat Extra UGens
   coyote trig-avg w-amp markov-synth frame-compare
   needle-rect skip-needle

*** Berlach Extra UGens
   lpf1 lpfvs6 lpf18 bl-buf-rd clipper4 clipper8
   clipper32 soft-clipper4 soft-clipper8
   soft-clip-amp4 soft-clip-amp8 os-wrap4 os-wrap8
   os-fold4 os-fold8 os-trunc4 os-trunc8 drive-noise
   peak-eq2 peak-eq4

*** Bhob Extra UGens
   henon2-dn henon2-dl henon2-dc henon-trig
   gbman2-dn gbman2-dl gbman2-dc gbman-trig
   standard2-dn standard2-dl standard2-dc
   standard-trig latoocarfian2-dn latoocarfian2-dl
   latoocarfian2-dc latoocarfian-trig lorenz2-dn
   lorenz2-dl lorenz2-dc lorenz-trig fhn2-dn fhn2-dl
   fhn2-dc fhn-trig pv-common-mag pv-common-mul
   pv-mag-minus pv-mag-gate pv-compander pv-mag-scale
   pv-morph pv-x-fade pv-soft-wipe pv-cutoff
   nested-allpass-n nested-allpass-l nested-allpass-c
   double-nested-allpass-n double-nested-allpass-l
   double-nested-allpass-c moog-ladder rlpfd
   streson nl-filt-n nl-filt-l nl-filt-c gauss-trig
   lf-brown-noise0 lf-brown-noise1 lf-brown-noise2
   t-brown-rand dbrown2 d-gauss t-gauss-rand
   t-beta-rand gendy4 gendy5 t-grains2 t-grains3

*** Blackrain Extra UGens
   amplitude-mod b-moog iir-filter svf

*** Distortion Extra UGens
   crossover-distortion smooth-decimator sine-shaper
   decimator disintegrator

*** Glitch Extra UGens
   glitch-rhpf glitch-hpf

*** Mda Extra UGens
   mda-piano

*** Membrane Extra UGens
   membrane-circle membrane-hexagon

*** RFW Extra UGens
   switch-delay average-output

*** SLU Extra UGens
   breakcore brusselator double-well double-well2
   double-well3 gravity-grid gravity-grid2

*** Stk Extra UGens
   stk-pluck stk-flute stk-bowed stk-mandolin
   stk-saxofony stk-shakers stk-banded-wg
   stk-voic-form stk-modal-bar stk-clarinet
   stk-blow-hole stk-moog stk-bee-three

*** VOSIM Extra UGens
   vosim
   Revision: 0.9.1.2, Date: 17th December, 2013
   Sam Aaron (sam.aaron gmail com)
   
